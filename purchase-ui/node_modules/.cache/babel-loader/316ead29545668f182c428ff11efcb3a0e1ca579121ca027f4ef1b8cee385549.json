{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemo, useState } from \"react\";\nexport var useFlag = function () {\n  var a = !!(0 < arguments.length && arguments[0] !== void 0) && arguments[0],\n    b = useState(a),\n    c = _slicedToArray(b, 2),\n    d = c[0],\n    e = c[1];\n  return [d, useMemo(function () {\n    return {\n      on: function on() {\n        return e(!0);\n      },\n      off: function off() {\n        return e(!1);\n      },\n      toggle: function toggle() {\n        return e(function (a) {\n          return !a;\n        });\n      },\n      set: e\n    };\n  }, [])];\n};","map":{"version":3,"names":["useMemo","useState","useFlag","a","arguments","length","b","c","_slicedToArray","d","e","on","off","toggle","set"],"sources":["/Users/leonofv/Desktop/purchase-ui/node_modules/@consta/src/hooks/useFlag/useFlag.ts"],"sourcesContent":["import { useMemo, useState } from 'react';\n\nexport type Flag = [\n  boolean,\n  {\n    on: () => void;\n    off: () => void;\n    toggle: () => void;\n    set: React.Dispatch<React.SetStateAction<boolean>>;\n  },\n];\n\nexport const useFlag = (initial = false): Flag => {\n  const [state, setState] = useState(initial);\n\n  return [\n    state,\n    useMemo(\n      () => ({\n        on: () => setState(true),\n        off: () => setState(false),\n        toggle: () => setState((state) => !state),\n        set: setState,\n      }),\n      [],\n    ),\n  ];\n};\n"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AAYA,OAAO,IAAMC,OAAO,GAAG,SAAAA,CAAA,EAA2B;EAAA,IAA1BC,CAA0B,UAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,mBAAAA,SAAA;IAAAE,CAAA,GACtBL,QAAQ,CAACE,CAAD,CADc;IAAAI,CAAA,GAAAC,cAAA,CAAAF,CAAA;IACzCG,CADyC,GAAAF,CAAA;IAClCG,CADkC,GAAAH,CAAA;EAGhD,OAAO,CACLE,CADK,EAELT,OAAO,CACL;IAAA,OAAO;MACLW,EAAE,EAAE,SAAAA,GAAA;QAAA,OAAMD,CAAQ,IAAd;MAAA,CADC;MAELE,GAAG,EAAE,SAAAA,IAAA;QAAA,OAAMF,CAAQ,IAAd;MAAA,CAFA;MAGLG,MAAM,EAAE,SAAAA,OAAA;QAAA,OAAMH,CAAQ,CAAC,UAACP,CAAD;UAAA,OAAW,CAACA,CAAZ;QAAA,CAAD,CAAd;MAAA,CAHH;MAILW,GAAG,EAAEJ;IAJA,CAAP;EAAA,CADK,EAOL,EAPK,CAFF,CAYR;AAAA,CAfM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}