{"ast":null,"code":"import React from \"react\";\nimport { EventInterceptorContext } from \"./EventInterceptor\";\nexport var usePropsHandler = function (a, b, c) {\n  var d = React.useContext(EventInterceptorContext);\n  if (!d) return b;\n  var e = d.eventHandler,\n    f = d.map,\n    g = f[a];\n  return g ? g(b, e, c) : b;\n};","map":{"version":3,"names":["React","EventInterceptorContext","usePropsHandler","a","b","c","d","useContext","e","eventHandler","f","map","g"],"sources":["/Users/leonofv/Documents/GitHub/PurchasesProject/purchase-ui/node_modules/@consta/src/components/EventInterceptor/usePropsHandler.tsx"],"sourcesContent":["import React from 'react';\n\nimport { EventInterceptorContext } from './EventInterceptor';\nimport { EventInterceptorComponentName } from './types';\n\nexport const usePropsHandler = <PROPS extends {}>(\n  componentName: EventInterceptorComponentName,\n  props: PROPS,\n  ref?: React.Ref<HTMLElement>,\n): PROPS => {\n  const context = React.useContext(EventInterceptorContext);\n\n  if (!context) {\n    return props;\n  }\n\n  const { eventHandler, map } = context;\n  const propsHandler = map[componentName];\n\n  if (!propsHandler) {\n    return props;\n  }\n\n  return propsHandler(props, eventHandler, ref) as PROPS;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,uBAAT;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAC7BC,CAD6B,EAE7BC,CAF6B,EAG7BC,CAH6B,EAInB;EACV,IAAMC,CAAO,GAAGN,KAAK,CAACO,UAAN,CAAiBN,uBAAjB,CAAhB;EAEA,IAAI,CAACK,CAAL,EACE,OAAOF,CAAP;EAJQ,IAOFI,CAPE,GAOoBF,CAPpB,CAOFG,YAPE;IAOYC,CAPZ,GAOoBJ,CAPpB,CAOYK,GAPZ;IAQJC,CAAY,GAAGF,CAAG,CAACP,CAAD,CARd;EAAA,OAULS,CAVK,GAcHA,CAAY,CAACR,CAAD,EAAQI,CAAR,EAAsBH,CAAtB,CAdT,GAWDD,CAIV;AAAA,CAnBM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}