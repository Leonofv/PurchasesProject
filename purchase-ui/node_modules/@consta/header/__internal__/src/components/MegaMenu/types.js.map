{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/components/MegaMenu/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\nimport {\n  AsAttributes,\n  AsTags,\n} from '@consta/uikit/__internal__/src/utils/types/AsTags';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributesAndRef } from '##/utils/types/PropsWithHTMLAttributes';\n\nimport {\n  MegaMenuBannerBarDefaultItem,\n  MegaMenuBannerBarPropGetItemAs,\n  MegaMenuBannerBarPropGetItemAttributes,\n  MegaMenuBannerBarPropGetItemDescription,\n  MegaMenuBannerBarPropGetItemImage,\n  MegaMenuBannerBarPropGetItemLabel,\n  MegaMenuBannerBarPropGetItemOnClick,\n} from './MegaMenuBannerBar';\n\nexport type MegaMenuPropOnItemClick<ITEM> = (\n  item: ITEM,\n  props: {\n    e: React.MouseEvent;\n  },\n) => void;\n\nexport type MegaMenuDefaultItem = {\n  key: string | number;\n  label: string;\n  iconLeft?: IconComponent;\n  as?: AsTags;\n  attributes?: AsAttributes;\n  subMenu?: MegaMenuDefaultItem[];\n  onClick?: React.MouseEventHandler;\n};\n\nexport type MegaMenuPropGetItemKey<ITEM> = (item: ITEM) => string | number;\nexport type MegaMenuPropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type MegaMenuPropGetItemIconLeft<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\nexport type MegaMenuPropGetItemOnClick<ITEM> = (\n  item: ITEM,\n) => React.MouseEventHandler | undefined;\nexport type MegaMenuPropGetItemAs<ITEM> = (item: ITEM) => AsTags | undefined;\nexport type MegaMenuPropGetItemAttributes<ITEM> = (\n  item: ITEM,\n) => AsAttributes | undefined;\nexport type MegaMenuPropGetItemSubMenu<ITEM> = (\n  item: ITEM,\n) => ITEM[] | undefined;\n\nexport type ItemMappers<ITEM = MegaMenuDefaultItem> = {\n  getItemKey?: MegaMenuPropGetItemKey<ITEM>;\n  getItemLabel?: MegaMenuPropGetItemLabel<ITEM>;\n  getItemIconLeft?: MegaMenuPropGetItemIconLeft<ITEM>;\n  getItemOnClick?: MegaMenuPropGetItemOnClick<ITEM>;\n  getItemAs?: MegaMenuPropGetItemAs<ITEM>;\n  getItemAttributes?: MegaMenuPropGetItemAttributes<ITEM>;\n  getItemSubMenu?: MegaMenuPropGetItemSubMenu<ITEM>;\n};\n\nexport type BannerMappers<ITEM = MegaMenuBannerBarDefaultItem> = {\n  getBannerLabel?: MegaMenuBannerBarPropGetItemLabel<ITEM>;\n  getBannerOnClick?: MegaMenuBannerBarPropGetItemOnClick<ITEM>;\n  getBannerDescription?: MegaMenuBannerBarPropGetItemDescription<ITEM>;\n  getBannerImage?: MegaMenuBannerBarPropGetItemImage<ITEM>;\n  getBannerAs?: MegaMenuBannerBarPropGetItemAs<ITEM>;\n  getBannerAttributes?: MegaMenuBannerBarPropGetItemAttributes<ITEM>;\n};\n\nexport type MegaMenuProps<\n  ITEM = MegaMenuDefaultItem,\n  BANNER = MegaMenuBannerBarDefaultItem,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    banners?: BANNER[];\n    items: ITEM[];\n    menuTitle?: string;\n    menuShowButtonText?: string;\n    menuHideButtonText?: string;\n    menuMaxElements?: number;\n    bannerPosition?: 'right' | 'bottom';\n    onItemClick?: MegaMenuPropOnItemClick<ITEM>;\n    onBannerClick?: MegaMenuPropOnItemClick<BANNER>;\n  } & BannerMappers<BANNER> &\n    ItemMappers<ITEM> &\n    (ITEM extends { key: MegaMenuDefaultItem['key'] }\n      ? {}\n      : { getItemKey: MegaMenuPropGetItemKey<ITEM> }) &\n    (ITEM extends { label: MegaMenuDefaultItem['label'] }\n      ? {}\n      : { getItemLabel: MegaMenuPropGetItemLabel<ITEM> }) &\n    (BANNER extends { label: MegaMenuBannerBarDefaultItem['label'] | unknown }\n      ? {}\n      : { getBannerLabel: MegaMenuBannerBarPropGetItemLabel<ITEM> }),\n  HTMLDivElement\n>;\n\nexport type MegaMenuComponent = <\n  ITEM = MegaMenuDefaultItem,\n  BANNER = MegaMenuBannerBarDefaultItem,\n>(\n  props: MegaMenuProps<ITEM, BANNER>,\n  ref: React.Ref<HTMLDivElement>,\n) => React.ReactElement | null;\n"],"mappings":""}