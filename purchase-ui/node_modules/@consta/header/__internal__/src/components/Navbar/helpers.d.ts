/// <reference types="react" />
import { DefaultNavbarGroup, DefaultNavbarItem, DefaultNavbarRailItem, NavbarPropGetGroupKey, NavbarPropGetGroupLabel, NavbarPropGetGroupRightSide, NavbarPropGetItemActive, NavbarPropGetItemGroupId, NavbarPropGetItemIcon, NavbarPropGetItemLabel, NavbarPropGetItemRightSide, NavbarPropGetItemStatus, NavbarPropGetItemSubMenu, NavbarProps, NavbarRailPropGetItemTooltip, NavbarRailProps } from './types';
export declare function withDefaultGetters<ITEM = DefaultNavbarItem, GROUP = DefaultNavbarGroup>(props: NavbarProps<ITEM, GROUP>): {
    items: ITEM[];
    size?: "m" | "s" | undefined;
    form?: "default" | "brick" | "round" | undefined;
    onItemClick?: import("./types").NavbarPropOnItemClick<ITEM> | undefined;
    getItemLabel?: NavbarPropGetItemLabel<ITEM> | undefined;
    getItemIcon?: NavbarPropGetItemIcon<ITEM> | undefined;
    getItemActive?: NavbarPropGetItemActive<ITEM> | undefined;
    getItemRightSide?: NavbarPropGetItemRightSide<ITEM> | undefined;
    getItemStatus?: NavbarPropGetItemStatus<ITEM> | undefined;
    getItemGroupKey?: NavbarPropGetItemGroupId<ITEM> | undefined;
    getItemAs?: import("./types").NavbarPropGetItemAs<ITEM> | undefined;
    getItemAttributes?: import("./types").NavbarPropGetItemAttributes<ITEM> | undefined;
    getItemRef?: import("./types").NavbarPropGetItemRef<ITEM> | undefined;
    getItemSubMenu?: NavbarPropGetItemSubMenu<ITEM> | undefined;
    getItemAdditionalClassName?: import("./types").NavbarPropGetItemAdditionalClassName<ITEM> | undefined;
    groups?: GROUP[] | undefined;
    getGroupKey?: NavbarPropGetGroupKey<GROUP> | undefined;
    getGroupLabel?: NavbarPropGetGroupLabel<GROUP> | undefined;
    getGroupRightSide?: NavbarPropGetGroupRightSide<GROUP> | undefined;
    sortGroup?: import("./types").NavbarPropSortGroup<ITEM, GROUP> | undefined;
    getGroupAdditionalClassName?: import("./types").NavbarPropGetGroupAdditionalClassName<GROUP> | undefined;
} & Omit<import("react").HTMLAttributes<HTMLDivElement>, "css" | "items" | "onItemClick" | "getItemLabel" | "getItemIcon" | "form" | "size" | "getItemAs" | "getItemAttributes" | "groups" | "getItemSubMenu" | "getItemActive" | "getGroupKey" | "getGroupLabel" | "getItemRightSide" | "getItemGroupKey" | "getItemStatus" | "getItemRef" | "getItemAdditionalClassName" | "getGroupRightSide" | "sortGroup" | "getGroupAdditionalClassName"> & import("react").RefAttributes<HTMLDivElement> & (ITEM extends {
    label: string;
} ? {} : {
    getItemLabel: NavbarPropGetItemLabel<ITEM>;
}) & (GROUP extends {
    id: string | number;
} ? {} : {
    getGroupKey: NavbarPropGetGroupKey<GROUP>;
}) & {
    getItemLabel: NavbarPropGetItemLabel<DefaultNavbarItem> | NavbarPropGetItemLabel<ITEM>;
    getItemGroupKey: NavbarPropGetItemGroupId<DefaultNavbarItem> | NavbarPropGetItemGroupId<ITEM>;
    getItemActive: NavbarPropGetItemActive<DefaultNavbarItem> | NavbarPropGetItemActive<ITEM>;
    getItemIcon: NavbarPropGetItemIcon<DefaultNavbarItem> | NavbarPropGetItemIcon<ITEM>;
    getItemRightSide: NavbarPropGetItemRightSide<DefaultNavbarItem> | NavbarPropGetItemRightSide<ITEM>;
    getGroupLabel: NavbarPropGetGroupLabel<DefaultNavbarGroup> | NavbarPropGetGroupLabel<GROUP>;
    getGroupKey: NavbarPropGetGroupKey<DefaultNavbarGroup> | NavbarPropGetGroupKey<GROUP>;
    getGroupRightSide: NavbarPropGetGroupRightSide<DefaultNavbarGroup> | NavbarPropGetGroupRightSide<GROUP>;
    getItemSubMenu: NavbarPropGetItemSubMenu<DefaultNavbarItem> | NavbarPropGetItemSubMenu<ITEM>;
    getItemStatus: NavbarPropGetItemStatus<DefaultNavbarItem> | NavbarPropGetItemStatus<ITEM>;
};
export declare function withDefaultRailGetters<ITEM = NavbarRailProps>(props: NavbarRailProps<ITEM>): {
    items: ITEM[];
    size?: "m" | "s" | undefined;
    form?: "default" | "brick" | "round" | undefined;
    onItemClick?: import("./types").NavbarPropOnItemClick<ITEM> | undefined;
    getItemLabel?: import("./types").NavbarRailPropGetItemLabel<ITEM> | undefined;
    getItemIcon?: import("./types").NavbarRailPropGetItemIcon<ITEM> | undefined;
    getItemActive?: NavbarPropGetItemActive<ITEM> | undefined;
    getItemStatus?: NavbarPropGetItemStatus<ITEM> | undefined;
    getItemAs?: import("./types").NavbarPropGetItemAs<ITEM> | undefined;
    getItemAttributes?: import("./types").NavbarPropGetItemAttributes<ITEM> | undefined;
    getItemRef?: import("./types").NavbarPropGetItemRef<ITEM> | undefined;
    getItemAdditionalClassName?: import("./types").NavbarPropGetItemAdditionalClassName<ITEM> | undefined;
    getItemTooltip?: NavbarRailPropGetItemTooltip<ITEM> | undefined;
    tooltipProps?: Omit<import("@consta/uikit/Tooltip").TooltipProps, "children" | "position" | "anchorRef" | "equalAnchorWidth"> | undefined;
} & Omit<import("react").HTMLAttributes<HTMLDivElement>, "css" | "items" | "onItemClick" | "getItemLabel" | "getItemIcon" | "form" | "size" | "getItemAs" | "getItemAttributes" | "getItemActive" | "getItemStatus" | "getItemRef" | "getItemAdditionalClassName" | "getItemTooltip" | "tooltipProps"> & import("react").RefAttributes<HTMLDivElement> & (ITEM extends {
    icon: import("@consta/icons/Icon").IconComponent<"span">;
} ? {} : {
    getItemIcon: import("./types").NavbarRailPropGetItemIcon<ITEM>;
}) & {
    getItemLabel: NavbarPropGetItemLabel<DefaultNavbarItem> | import("./types").NavbarRailPropGetItemLabel<ITEM>;
    getItemActive: NavbarPropGetItemActive<DefaultNavbarItem> | NavbarPropGetItemActive<ITEM>;
    getItemIcon: NavbarPropGetItemIcon<DefaultNavbarItem> | import("./types").NavbarRailPropGetItemIcon<ITEM>;
    getItemStatus: NavbarPropGetItemStatus<DefaultNavbarItem> | NavbarPropGetItemStatus<ITEM>;
    getItemTooltip: NavbarRailPropGetItemTooltip<DefaultNavbarRailItem> | NavbarRailPropGetItemTooltip<ITEM>;
};
