{"version":3,"file":"types.js","names":["navbarPropSize","defaultNavbarPropSize","navbarPropForm","defaultNavbarPropForm"],"sources":["../../../../../src/components/Navbar/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\nimport { Group } from '@consta/uikit/__internal__/src/utils/getGroups';\nimport {\n  AsAttributes,\n  AsTags,\n} from '@consta/uikit/__internal__/src/utils/types/AsTags';\nimport { PropsWithHTMLAttributesAndRef } from '@consta/uikit/__internal__/src/utils/types/PropsWithHTMLAttributes';\nimport { BadgePropStatus } from '@consta/uikit/Badge';\nimport { TooltipProps } from '@consta/uikit/Tooltip';\nimport React from 'react';\n\nexport const navbarPropSize = ['s', 'm'] as const;\nexport type NavbarPropSize = (typeof navbarPropSize)[number];\nexport const defaultNavbarPropSize: NavbarPropSize = 'm';\n\nexport const navbarPropForm = ['default', 'brick', 'round'] as const;\nexport type NavbarPropForm = (typeof navbarPropForm)[number];\nexport const defaultNavbarPropForm = navbarPropForm[0];\n\nexport type DefaultNavbarGroup = {\n  id: string | number;\n  label?: string;\n  rightSide?: React.ReactNode;\n};\n\nexport type DefaultNavbarItem = {\n  label: string;\n  status?: BadgePropStatus;\n  groupId?: string | number;\n  icon?: IconComponent;\n  rightSide?: React.ReactNode;\n  active?: boolean;\n  subMenu?: DefaultNavbarItem[];\n};\n\nexport type DefaultNavbarRailItem = {\n  label: string;\n  icon: IconComponent;\n  status?: BadgePropStatus;\n  active?: boolean;\n  tooltip?: React.ReactNode;\n};\n\nexport type NavbarPropOnItemClick<ITEM> = (\n  item: ITEM,\n  params: {\n    e: React.MouseEvent;\n  },\n) => void;\n\n// ITEMS\n\nexport type NavbarPropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type NavbarRailPropGetItemLabel<ITEM> = (\n  item: ITEM,\n) => string | undefined;\n\nexport type NavbarPropGetItemAdditionalClassName<ITEM> = (item: ITEM) => string;\n\nexport type NavbarPropGetItemDisabled<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\n\nexport type NavbarPropGetItemActive<ITEM> = (item: ITEM) => boolean | undefined;\n\nexport type NavbarPropGetItemGroupId<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\n\nexport type NavbarPropGetItemLeftSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type NavbarPropGetItemIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\n\nexport type NavbarRailPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent;\n\nexport type NavbarPropGetItemRightSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type NavbarPropGetItemRightIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\n\nexport type NavbarPropGetItemAs<ITEM> = (item: ITEM) => AsTags | undefined;\n\nexport type NavbarPropGetItemAttributes<ITEM> = (\n  item: ITEM,\n) => AsAttributes | undefined;\n\nexport type NavbarPropSortGroup<ITEM, GROUP> = (\n  a: Group<ITEM, GROUP>,\n  b: Group<ITEM, GROUP>,\n) => number;\n\n// GROUPS\nexport type NavbarPropGetGroupKey<GROUP> = (\n  item: GROUP,\n) => string | number | undefined;\n\nexport type NavbarPropGetGroupAdditionalClassName<GROUP> = (\n  item: GROUP,\n) => string;\n\nexport type NavbarPropGetGroupLabel<GROUP> = (\n  item: GROUP,\n) => string | undefined;\nexport type NavbarPropGetGroupRightSide<GROUP> = (\n  item: GROUP,\n) => React.ReactNode | undefined;\n\nexport type NavbarPropGetItemRef<ITEM> = (\n  item: ITEM,\n) => React.RefObject<HTMLElement> | undefined;\n\nexport type NavbarPropGetItemStatus<ITEM> = (\n  item: ITEM,\n) => BadgePropStatus | undefined;\n\nexport type NavbarPropGetItemSubMenu<ITEM> = (item: ITEM) => ITEM[] | undefined;\nexport type NavbarRailPropGetItemTooltip<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type NavbarProps<\n  ITEM = DefaultNavbarItem,\n  GROUP = DefaultNavbarGroup,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    items: ITEM[];\n    size?: NavbarPropSize;\n    form?: NavbarPropForm;\n    onItemClick?: NavbarPropOnItemClick<ITEM>;\n    getItemLabel?: NavbarPropGetItemLabel<ITEM>;\n    getItemIcon?: NavbarPropGetItemIcon<ITEM>;\n    getItemActive?: NavbarPropGetItemActive<ITEM>;\n    getItemRightSide?: NavbarPropGetItemRightSide<ITEM>;\n    getItemStatus?: NavbarPropGetItemStatus<ITEM>;\n    getItemGroupKey?: NavbarPropGetItemGroupId<ITEM>;\n    getItemAs?: NavbarPropGetItemAs<ITEM>;\n    getItemAttributes?: NavbarPropGetItemAttributes<ITEM>;\n    getItemRef?: NavbarPropGetItemRef<ITEM>;\n    getItemSubMenu?: NavbarPropGetItemSubMenu<ITEM>;\n    getItemAdditionalClassName?: NavbarPropGetItemAdditionalClassName<ITEM>;\n    groups?: GROUP[];\n    getGroupKey?: NavbarPropGetGroupKey<GROUP>;\n    getGroupLabel?: NavbarPropGetGroupLabel<GROUP>;\n    getGroupRightSide?: NavbarPropGetGroupRightSide<GROUP>;\n    sortGroup?: NavbarPropSortGroup<ITEM, GROUP>;\n    getGroupAdditionalClassName?: NavbarPropGetGroupAdditionalClassName<GROUP>;\n  },\n  HTMLDivElement\n> &\n  (ITEM extends { label: DefaultNavbarItem['label'] }\n    ? {}\n    : { getItemLabel: NavbarPropGetItemLabel<ITEM> }) &\n  (GROUP extends { id: DefaultNavbarGroup['id'] }\n    ? {}\n    : { getGroupKey: NavbarPropGetGroupKey<GROUP> });\n\nexport type NavbarComponent = <\n  ITEM = DefaultNavbarItem,\n  GROUP = DefaultNavbarGroup,\n>(\n  props: NavbarProps<ITEM, GROUP>,\n) => React.ReactElement | null;\n\nexport type NavbarRailProps<ITEM = DefaultNavbarRailItem> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      items: ITEM[];\n      size?: NavbarPropSize;\n      form?: NavbarPropForm;\n      onItemClick?: NavbarPropOnItemClick<ITEM>;\n      getItemLabel?: NavbarRailPropGetItemLabel<ITEM>;\n      getItemIcon?: NavbarRailPropGetItemIcon<ITEM>;\n      getItemActive?: NavbarPropGetItemActive<ITEM>;\n      getItemStatus?: NavbarPropGetItemStatus<ITEM>;\n      getItemAs?: NavbarPropGetItemAs<ITEM>;\n      getItemAttributes?: NavbarPropGetItemAttributes<ITEM>;\n      getItemRef?: NavbarPropGetItemRef<ITEM>;\n      getItemAdditionalClassName?: NavbarPropGetItemAdditionalClassName<ITEM>;\n      getItemTooltip?: NavbarRailPropGetItemTooltip<ITEM>;\n      tooltipProps?: Omit<\n        TooltipProps,\n        'children' | 'position' | 'equalAnchorWidth' | 'anchorRef'\n      >;\n    },\n    HTMLDivElement\n  > &\n    (ITEM extends { icon: DefaultNavbarRailItem['icon'] }\n      ? {}\n      : { getItemIcon: NavbarRailPropGetItemIcon<ITEM> });\n\nexport type NavbarRailComponent = <ITEM = DefaultNavbarRailItem>(\n  props: NavbarRailProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type NavbarItemProps<ITEM = DefaultNavbarItem> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      size: NavbarPropSize;\n      item: ITEM;\n      form: NavbarPropForm;\n      onItemClick: NavbarPropOnItemClick<ITEM> | undefined;\n      getItemLabel: NavbarPropGetItemLabel<ITEM>;\n      getItemIcon: NavbarPropGetItemIcon<ITEM>;\n      getItemActive: NavbarPropGetItemActive<ITEM>;\n      getItemRightSide: NavbarPropGetItemRightSide<ITEM>;\n      getItemStatus: NavbarPropGetItemStatus<ITEM> | undefined;\n      getItemAs: NavbarPropGetItemAs<ITEM> | undefined;\n      getItemAttributes: NavbarPropGetItemAttributes<ITEM> | undefined;\n      getItemRef: NavbarPropGetItemRef<ITEM> | undefined;\n      getItemSubMenu: NavbarPropGetItemSubMenu<ITEM> | undefined;\n      getItemAdditionalClassName:\n        | NavbarPropGetItemAdditionalClassName<ITEM>\n        | undefined;\n      level: number;\n    },\n    HTMLDivElement\n  >;\n\nexport type NavbarItemComponent = <ITEM = DefaultNavbarItem>(\n  props: NavbarItemProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type NavbarRailItemProps = PropsWithHTMLAttributesAndRef<\n  {\n    size?: NavbarPropSize;\n    form?: NavbarPropForm;\n    icon?: IconComponent;\n    active?: boolean;\n    status?: BadgePropStatus;\n    label?: string;\n  },\n  HTMLDivElement\n>;\n"],"mappings":"AAWA,MAAO,MAAM,CAAAA,cAAc,CAAG,CAAC,GAAG,CAAE,GAAG,CAAU,CAEjD,MAAO,MAAM,CAAAC,qBAAqC,CAAG,GAAG,CAExD,MAAO,MAAM,CAAAC,cAAc,CAAG,CAAC,SAAS,CAAE,OAAO,CAAE,OAAO,CAAU,CAEpE,MAAO,MAAM,CAAAC,qBAAqB,CAAGD,cAAc,CAAC,CAAC,CAAC"}