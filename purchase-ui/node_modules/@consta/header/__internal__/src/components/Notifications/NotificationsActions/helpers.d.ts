/// <reference types="react" />
import { ButtonMenuDefaultItem, NotificationsActionsPropGetItemIcon, NotificationsActionsPropGetItemLabel, NotificationsActionsPropGetItemOnClick, NotificationsActionsProps } from './types';
export declare function withDefaultGetters<ITEM>(props: NotificationsActionsProps<ITEM>): {
    items?: ITEM[] | undefined;
    mainButtonOnlyIcon?: boolean | undefined;
    opened?: boolean | undefined;
    onOpen?: ((value: boolean) => void) | undefined;
    onItemClick?: import("./types").NotificationsActionsOnItemClick<ITEM> | undefined;
} & Omit<import("react").HTMLAttributes<HTMLButtonElement>, "css" | "items" | "onItemClick" | "opened" | "onOpen" | "mainButtonOnlyIcon"> & {
    getItemLabel?: NotificationsActionsPropGetItemLabel<ITEM> | undefined;
    getItemOnClick?: NotificationsActionsPropGetItemOnClick<ITEM> | undefined;
    getItemIcon?: NotificationsActionsPropGetItemIcon<ITEM> | undefined;
} & (ITEM extends {
    label: string;
} ? {} : {
    getItemLabel: NotificationsActionsPropGetItemLabel<ITEM>;
}) & {
    getItemIcon: NotificationsActionsPropGetItemIcon<ButtonMenuDefaultItem> | NotificationsActionsPropGetItemIcon<ITEM>;
    getItemLabel: NotificationsActionsPropGetItemLabel<ButtonMenuDefaultItem> | NotificationsActionsPropGetItemLabel<ITEM>;
    getItemOnClick: NotificationsActionsPropGetItemOnClick<ButtonMenuDefaultItem> | NotificationsActionsPropGetItemOnClick<ITEM>;
};
