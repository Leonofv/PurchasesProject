/// <reference types="react" />
import { NotificationsItemAction } from '../NotificationsItem';
import { NotificationsListDefaultGroup, NotificationsListDefaultItem, NotificationsListPropGetActionIcon, NotificationsListPropGetActionLabel, NotificationsListPropGetActionOnClick, NotificationsListPropGetGroupId, NotificationsListPropGetGroupLabel, NotificationsListPropGetItemActions, NotificationsListPropGetItemBadges, NotificationsListPropGetItemDate, NotificationsListPropGetItemDescription, NotificationsListPropGetItemGroup, NotificationsListPropGetItemImage, NotificationsListPropGetItemLabel, NotificationsListPropGetItemRead, NotificationsListPropGetItemView, NotificationsListPropGroupLabelFormat, NotificationsListProps } from './types';
export declare function withDefaultGetters<ITEM, GROUP, ACTION>(props: NotificationsListProps<ITEM, GROUP, ACTION>): {
    children?: undefined;
    items: ITEM[];
    itemDateFormat?: import("./types").NotificationsListPropItemDateFormat | undefined;
    title?: string | undefined;
    actions?: ACTION[] | undefined;
    getItemLabel?: NotificationsListPropGetItemLabel<ITEM> | undefined;
    getItemDescription?: NotificationsListPropGetItemDescription<ITEM> | undefined;
    getItemImage?: NotificationsListPropGetItemImage<ITEM> | undefined;
    getItemRead?: NotificationsListPropGetItemRead<ITEM> | undefined;
    getItemDate?: NotificationsListPropGetItemDate<ITEM> | undefined;
    getItemBadges?: NotificationsListPropGetItemBadges<ITEM> | undefined;
    getItemActions?: NotificationsListPropGetItemActions<ITEM> | undefined;
    getItemGroup?: NotificationsListPropGetItemGroup<ITEM> | undefined;
    getItemView?: NotificationsListPropGetItemView<ITEM> | undefined;
    getActionLabel?: NotificationsListPropGetActionLabel<ACTION> | undefined;
    getActionIcon?: NotificationsListPropGetActionIcon<ACTION> | undefined;
    getActionOnClick?: NotificationsListPropGetActionOnClick<ACTION> | undefined;
    getGroupLabel?: NotificationsListPropGetGroupLabel<GROUP> | undefined;
    getGroupId?: NotificationsListPropGetGroupId<GROUP> | undefined;
    groupByDay?: false | undefined;
    groupLabelFormat?: undefined;
    groups?: GROUP[] | undefined;
    onClose?: ((event: import("react").MouseEvent<Element, MouseEvent>) => void) | undefined;
} & (ACTION extends {
    label: string;
} ? {} : {
    getActionLabel: NotificationsListPropGetItemActions<ACTION>;
}) & (GROUP extends {
    label: string;
} ? {} : {
    getGroupLabel: NotificationsListPropGetGroupLabel<GROUP>;
}) & (GROUP extends {
    id: string;
} ? {} : {
    getGroupId: NotificationsListPropGetGroupId<GROUP>;
}) & (ITEM extends {
    label: string;
} ? {} : {
    getItemLabel: NotificationsListPropGetItemLabel<ITEM>;
}) & Omit<import("react").HTMLAttributes<HTMLDivElement>, "css" | "title" | "children" | "items" | "getItemLabel" | "onClose" | "getItemDescription" | "getItemImage" | "groups" | "getGroupLabel" | "getGroupId" | "getItemGroup" | "getItemView" | "actions" | "itemDateFormat" | "getItemRead" | "getItemDate" | "getItemBadges" | "getItemActions" | "getActionLabel" | "getActionIcon" | "getActionOnClick" | "groupByDay" | "groupLabelFormat" | keyof (ACTION extends {
    label: string;
} ? {} : {
    getActionLabel: NotificationsListPropGetItemActions<ACTION>;
}) | keyof (GROUP extends {
    label: string;
} ? {} : {
    getGroupLabel: NotificationsListPropGetGroupLabel<GROUP>;
}) | keyof (GROUP extends {
    id: string;
} ? {} : {
    getGroupId: NotificationsListPropGetGroupId<GROUP>;
}) | keyof (ITEM extends {
    label: string;
} ? {} : {
    getItemLabel: NotificationsListPropGetItemLabel<ITEM>;
})> & {
    getActionIcon: NotificationsListPropGetActionIcon<NotificationsItemAction> | NotificationsListPropGetActionIcon<ACTION>;
    getActionLabel: NotificationsListPropGetActionLabel<NotificationsItemAction> | NotificationsListPropGetActionLabel<ACTION>;
    getActionOnClick: NotificationsListPropGetActionOnClick<NotificationsItemAction> | NotificationsListPropGetActionOnClick<ACTION>;
    getGroupId: NotificationsListPropGetGroupId<NotificationsListDefaultGroup> | NotificationsListPropGetGroupId<GROUP>;
    getGroupLabel: NotificationsListPropGetGroupLabel<NotificationsListDefaultGroup> | NotificationsListPropGetGroupLabel<GROUP>;
    getItemActions: NotificationsListPropGetItemActions<NotificationsListDefaultItem> | NotificationsListPropGetItemActions<ITEM>;
    getItemBadges: NotificationsListPropGetItemBadges<NotificationsListDefaultItem> | NotificationsListPropGetItemBadges<ITEM>;
    getItemDate: NotificationsListPropGetItemDate<NotificationsListDefaultItem> | NotificationsListPropGetItemDate<ITEM>;
    getItemDescription: NotificationsListPropGetItemDescription<NotificationsListDefaultItem> | NotificationsListPropGetItemDescription<ITEM>;
    getItemGroup: NotificationsListPropGetItemGroup<NotificationsListDefaultItem> | NotificationsListPropGetItemGroup<ITEM>;
    getItemImage: NotificationsListPropGetItemImage<NotificationsListDefaultItem> | NotificationsListPropGetItemImage<ITEM>;
    getItemLabel: NotificationsListPropGetItemLabel<NotificationsListDefaultItem> | NotificationsListPropGetItemLabel<ITEM>;
    getItemRead: NotificationsListPropGetItemRead<NotificationsListDefaultItem> | NotificationsListPropGetItemRead<ITEM>;
    getItemView: NotificationsListPropGetItemView<NotificationsListDefaultItem> | NotificationsListPropGetItemView<ITEM>;
    ref?: import("react").Ref<HTMLDivElement> | undefined;
    key?: import("react").Key | null | undefined;
};
type ReturnedGroup<ITEM, GROUP> = {
    items: ITEM[];
    key: string | number;
    group?: GROUP;
    groupIndex: number;
};
export declare const noGroupKey = "no-group";
export declare const defaultGroupLabelFormat: NotificationsListPropGroupLabelFormat<true>;
export declare const getGroups: <ITEM, GROUP>(items: ITEM[], groups: GROUP[] | undefined, groupByDay: boolean, getItemGroup: NotificationsListPropGetItemGroup<ITEM>, getItemDate: NotificationsListPropGetItemDate<ITEM>, getGroupId: NotificationsListPropGetGroupId<GROUP>) => ReturnedGroup<ITEM, GROUP>[];
export {};
