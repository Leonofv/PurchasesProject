{"version":3,"file":"types.js","names":[],"sources":["../../../../../../src/components/Notifications/NotificationsList/types.ts"],"sourcesContent":["import { IconProps } from '@consta/icons/Icon';\n\nimport { PropsWithHTMLAttributesAndRef } from '##/utils/types/PropsWithHTMLAttributes';\n\nimport {\n  NotificationsItemAction,\n  NotificationsItemBadge,\n} from '../NotificationsItem';\n\nexport type NotificationsListDefaultGroup = {\n  label: string;\n  id: string;\n};\n\nexport type NotificationsListDefaultItem = {\n  label: string;\n  description?: string;\n  image?: string;\n  read?: boolean;\n  date?: Date;\n  badges?: NotificationsItemBadge[];\n  actions?: NotificationsItemAction[];\n  onClick?: React.EventHandler<React.MouseEvent>;\n  group?: string;\n  view?: 'default' | 'user';\n};\n\nexport type NotificationsListPropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type NotificationsListPropGetItemDescription<ITEM> = (\n  item: ITEM,\n) => string | undefined;\nexport type NotificationsListPropGetItemImage<ITEM> = (\n  item: ITEM,\n) => string | undefined;\nexport type NotificationsListPropGetItemRead<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\nexport type NotificationsListPropGetItemDate<ITEM> = (\n  item: ITEM,\n) => Date | undefined;\nexport type NotificationsListPropGetItemBadges<ITEM> = (\n  item: ITEM,\n) => NotificationsItemBadge[] | undefined;\nexport type NotificationsListPropGetItemActions<ITEM> = (\n  item: ITEM,\n) => NotificationsItemAction[] | undefined;\nexport type NotificationsListPropGetItemGroup<ITEM> = (\n  item: ITEM,\n) => string | undefined;\nexport type NotificationsListPropGetItemView<ITEM> = (\n  item: ITEM,\n) => 'default' | 'user' | undefined;\nexport type NotificationsListPropItemDateFormat = (date: Date) => string;\n\nexport type NotificationsListPropGetActionLabel<ACTION> = (\n  action: ACTION,\n) => string;\nexport type NotificationsListPropGetActionIcon<ACTION> = (\n  action: ACTION,\n) => React.FC<IconProps> | undefined;\nexport type NotificationsListPropGetActionOnClick<ACTION> = (\n  action: ACTION,\n) => React.EventHandler<React.MouseEvent> | undefined;\n\nexport type NotificationsListPropGetGroupLabel<GROUP> = (\n  group: GROUP,\n) => string;\nexport type NotificationsListPropGetGroupId<GROUP> = (\n  group: GROUP,\n) => string | number;\n\nexport type NotificationsListPropGroupLabelFormat<GROUP_BY_DAY> =\n  GROUP_BY_DAY extends true ? (timestamp: number) => string : never;\n\nexport type Props<ITEM, GROUP, ACTION, GROUP_BY_DAY extends boolean> = {\n  children?: never;\n  items: ITEM[];\n  itemDateFormat?: NotificationsListPropItemDateFormat;\n  title?: string;\n  actions?: ACTION[];\n  getItemLabel?: NotificationsListPropGetItemLabel<ITEM>;\n  getItemDescription?: NotificationsListPropGetItemDescription<ITEM>;\n  getItemImage?: NotificationsListPropGetItemImage<ITEM>;\n  getItemRead?: NotificationsListPropGetItemRead<ITEM>;\n  getItemDate?: NotificationsListPropGetItemDate<ITEM>;\n  getItemBadges?: NotificationsListPropGetItemBadges<ITEM>;\n  getItemActions?: NotificationsListPropGetItemActions<ITEM>;\n  getItemGroup?: NotificationsListPropGetItemGroup<ITEM>;\n  getItemView?: NotificationsListPropGetItemView<ITEM>;\n  getActionLabel?: NotificationsListPropGetActionLabel<ACTION>;\n  getActionIcon?: NotificationsListPropGetActionIcon<ACTION>;\n  getActionOnClick?: NotificationsListPropGetActionOnClick<ACTION>;\n  getGroupLabel?: NotificationsListPropGetGroupLabel<GROUP>;\n  getGroupId?: NotificationsListPropGetGroupId<GROUP>;\n  groupByDay?: GROUP_BY_DAY;\n  groupLabelFormat?: NotificationsListPropGroupLabelFormat<GROUP_BY_DAY>;\n  groups?: GROUP_BY_DAY extends true ? never : GROUP[];\n  onClose?: React.EventHandler<React.MouseEvent>;\n} & (ACTION extends { label: NotificationsItemAction['label'] }\n  ? {}\n  : { getActionLabel: NotificationsListPropGetItemActions<ACTION> }) &\n  (GROUP extends { label: NotificationsListDefaultGroup['label'] }\n    ? {}\n    : { getGroupLabel: NotificationsListPropGetGroupLabel<GROUP> }) &\n  (GROUP extends { id: NotificationsListDefaultGroup['id'] }\n    ? {}\n    : { getGroupId: NotificationsListPropGetGroupId<GROUP> }) &\n  (ITEM extends { label: NotificationsListDefaultItem['label'] }\n    ? {}\n    : { getItemLabel: NotificationsListPropGetItemLabel<ITEM> });\n\nexport type NotificationsListProps<\n  ITEM = NotificationsListDefaultItem,\n  GROUP = NotificationsListDefaultGroup,\n  ACTION = NotificationsItemAction,\n  GROUP_BY_DAY extends boolean = false,\n> = PropsWithHTMLAttributesAndRef<\n  Props<ITEM, GROUP, ACTION, GROUP_BY_DAY>,\n  HTMLDivElement\n>;\n\nexport type NotificationsListComponent = <\n  ITEM = NotificationsListDefaultItem,\n  GROUP = NotificationsListDefaultGroup,\n  ACTION = NotificationsItemAction,\n  GROUP_BY_DAY extends boolean = false,\n>(\n  props: NotificationsListProps<ITEM, GROUP, ACTION, GROUP_BY_DAY>,\n) => React.ReactElement | null;\n"],"mappings":""}