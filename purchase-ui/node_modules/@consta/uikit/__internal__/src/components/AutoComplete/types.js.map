{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/components/AutoComplete/types.ts"],"sourcesContent":["import React from 'react';\n\nimport { PropRenderItem } from '##/components/Select';\nimport { TextFieldProps } from '##/components/TextField';\n\nexport type AutoCompleteItemDefault = {\n  id: string | number;\n  label: string;\n  groupId?: number;\n};\n\nexport type AutoCompleteGroupDefault = {\n  label: string;\n  id: number | string;\n};\n\nexport type AutoCompletePropDropdownForm = 'default' | 'brick' | 'round';\n\nexport type AutoCompletePropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type AutoCompletePropGetItemKey<ITEM> = (item: ITEM) => string | number;\nexport type AutoCompletePropGetItemGroupId<ITEM> = (\n  item: ITEM,\n) => number | undefined;\nexport type AutoCompletePropGetGroupLabel<GROUP> = (group: GROUP) => string;\nexport type AutoCompletePropGetGroupId<GROUP> = (\n  group: GROUP,\n) => number | string;\n\nexport type AutoCompletePropSearchFunction<ITEM> = (\n  item: ITEM,\n  searchValue: string,\n) => boolean;\n\nexport type AutoCompletePropOnChange = (\n  value: string | null,\n  props: {\n    e: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n    id?: string;\n    name?: string;\n  },\n) => void;\n\nexport type AutoCompleteProps<\n  TYPE extends string,\n  ITEM = AutoCompleteItemDefault,\n  GROUP = AutoCompleteGroupDefault,\n> = {\n  items: ITEM[];\n  groups?: GROUP[];\n  renderItem?: PropRenderItem<ITEM>;\n  dropdownClassName?: string;\n  dropdownForm?: AutoCompletePropDropdownForm;\n  isLoading?: boolean;\n  searchFunction?: AutoCompletePropSearchFunction<ITEM>;\n  dropdownRef?: React.RefObject<HTMLDivElement>;\n  getItemLabel?: AutoCompletePropGetItemLabel<ITEM>;\n  getItemKey?: AutoCompletePropGetItemKey<ITEM>;\n  getItemGroupKey?: AutoCompletePropGetItemGroupId<ITEM>;\n  getGroupLabel?: AutoCompletePropGetGroupLabel<GROUP>;\n  getGroupKey?: AutoCompletePropGetGroupId<GROUP>;\n  onChange?: AutoCompletePropOnChange;\n  virtualScroll?: boolean;\n  onScrollToBottom?: (lenght: number) => void;\n  onDropdownOpen?: (isOpen: boolean) => void;\n  dropdownOpen?: boolean;\n  ignoreOutsideClicksRefs?: ReadonlyArray<React.RefObject<HTMLElement>>;\n} & Omit<\n  TextFieldProps<TYPE>,\n  'max' | 'min' | 'step' | 'incrementButtons' | 'onChange' | 'width'\n> &\n  (ITEM extends { label: AutoCompleteItemDefault['label'] }\n    ? {}\n    : {\n        getItemLabel: AutoCompletePropGetItemLabel<ITEM>;\n      }) &\n  (ITEM extends { id: AutoCompleteItemDefault['id'] }\n    ? {}\n    : { getItemKey: AutoCompletePropGetItemKey<ITEM> }) &\n  (GROUP extends { label: AutoCompleteGroupDefault['label'] }\n    ? {}\n    : { getGroupLabel: AutoCompletePropGetGroupLabel<GROUP> }) &\n  (GROUP extends { id: AutoCompleteGroupDefault['id'] }\n    ? {}\n    : { getGroupKey: AutoCompletePropGetGroupId<GROUP> });\n\nexport type AutoCompleteComponent = <\n  TYPE extends string,\n  ITEM = AutoCompleteItemDefault,\n  GROUP = AutoCompleteGroupDefault,\n>(\n  props: AutoCompleteProps<TYPE, ITEM, GROUP>,\n) => React.ReactElement | null;\n"],"mappings":""}