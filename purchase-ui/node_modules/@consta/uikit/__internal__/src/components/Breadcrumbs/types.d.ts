/// <reference types="react" />
import { IconComponent } from '@consta/icons/Icon';
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare const breadcrumbPropSize: readonly ["m", "xs", "s", "l"];
export declare type BreadcrumbPropSize = typeof breadcrumbPropSize[number];
export declare const breadcrumbPropSizeDefault: "m";
export declare const breadcrumbPropFitMode: readonly ["dropdown", "scroll"];
export declare type BreadcrumbPropFitMode = typeof breadcrumbPropFitMode[number];
export declare const breadcrumbPropFitModeDefault: "dropdown";
export declare type BreadcrumbsPropGetItemLabel<ITEM> = (item: ITEM) => string;
export declare type BreadcrumbsPropGetItemHref<ITEM> = (item: ITEM) => string | undefined;
export declare type BreadcrumbsPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent | undefined;
export declare type BreadcrumbsPropGetItemSubMenu<ITEM> = (item: ITEM) => ITEM[] | undefined;
export declare type BreadcrumbsPropGetItemOnClick<ITEM> = (item: ITEM) => React.MouseEventHandler | undefined;
export declare type BreadcrumbsPropOnItemClick<ITEM> = (item: ITEM, props: {
    e: React.MouseEvent;
}) => void;
export declare type DefaultItem = {
    label: string;
    icon?: IconComponent;
    href?: string;
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    subMenu?: DefaultItem[];
};
export declare type RenderItem<ITEM> = (item: ITEM | undefined, index: number | string, isFirst?: boolean, isLast?: boolean, ref?: React.Ref<HTMLLIElement>, hidden?: boolean) => React.ReactElement | undefined;
export declare type BreadcrumbsProps<ITEM = DefaultItem> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    getItemLabel?: BreadcrumbsPropGetItemLabel<ITEM>;
    getItemHref?: BreadcrumbsPropGetItemHref<ITEM>;
    getItemIcon?: BreadcrumbsPropGetItemIcon<ITEM>;
    getItemOnClick?: BreadcrumbsPropGetItemOnClick<ITEM>;
    getItemSubMenu?: BreadcrumbsPropGetItemSubMenu<ITEM>;
    onItemClick?: BreadcrumbsPropOnItemClick<ITEM>;
    size?: BreadcrumbPropSize;
    onlyIconRoot?: boolean;
    fitMode?: BreadcrumbPropFitMode;
    lastItemIsLink?: boolean;
}, HTMLUListElement> & (ITEM extends {
    label: DefaultItem['label'];
} ? {} : {
    getItemLabel: BreadcrumbsPropGetItemLabel<ITEM>;
});
export declare type BreadcrumbsComponent = <ITEM>(props: BreadcrumbsProps<ITEM>) => React.ReactElement | null;
export declare type BreadcrumbsMoreProps<ITEM> = PropsWithHTMLAttributesAndRef<{
    size: BreadcrumbPropSize;
    items: ITEM[];
    getItemLabel: BreadcrumbsPropGetItemLabel<ITEM>;
    getItemHref: BreadcrumbsPropGetItemHref<ITEM>;
    getItemIcon: BreadcrumbsPropGetItemIcon<ITEM>;
    getItemSubMenu: BreadcrumbsPropGetItemSubMenu<ITEM>;
    getItemOnClick: BreadcrumbsPropGetItemOnClick<ITEM>;
    onItemClick?: BreadcrumbsPropOnItemClick<ITEM>;
}, HTMLLIElement>;
export declare type BreadcrumbsMoreComponent = <ITEM>(props: BreadcrumbsMoreProps<ITEM>) => React.ReactElement | null;
export declare type BreadcrumbsItemProps<ITEM> = PropsWithHTMLAttributesAndRef<{
    size: 'm' | 'xs' | 's' | 'l';
    item?: ITEM;
    getItemLabel?: BreadcrumbsPropGetItemLabel<ITEM>;
    getItemHref?: BreadcrumbsPropGetItemHref<ITEM>;
    getItemIcon?: BreadcrumbsPropGetItemIcon<ITEM>;
    getItemSubMenu?: BreadcrumbsPropGetItemSubMenu<ITEM>;
    active?: boolean;
    onlyIcon?: boolean;
    delimiter?: boolean;
    onItemClick?: BreadcrumbsPropOnItemClick<ITEM>;
}, HTMLLIElement>;
export declare type BreadcrumbsItemComponent = <ITEM>(props: BreadcrumbsItemProps<ITEM>) => React.ReactElement | null;
export declare type BreadcrumbsFitModeDropdownProps<ITEM> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    getItemLabel: BreadcrumbsPropGetItemLabel<ITEM>;
    getItemHref: BreadcrumbsPropGetItemHref<ITEM>;
    getItemIcon: BreadcrumbsPropGetItemIcon<ITEM>;
    getItemOnClick: BreadcrumbsPropGetItemOnClick<ITEM>;
    getItemSubMenu: BreadcrumbsPropGetItemSubMenu<ITEM>;
    onItemClick?: BreadcrumbsPropOnItemClick<ITEM>;
    renderItem: RenderItem<ITEM>;
    size: BreadcrumbPropSize;
}, HTMLUListElement>;
export declare type BreadcrumbsFitModeDropdownComponent = <ITEM>(props: BreadcrumbsFitModeDropdownProps<ITEM>) => React.ReactElement | null;
export declare type BreadcrumbsFitModeScrollProps<ITEM> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    renderItem: RenderItem<ITEM>;
}, HTMLUListElement>;
export declare type BreadcrumbsFitModeScrollComponent = <ITEM>(props: BreadcrumbsFitModeScrollProps<ITEM>) => React.ReactElement | null;
export declare type BreadcrumbsShortListComponent = <ITEM>(props: BreadcrumbsFitModeScrollProps<ITEM>) => React.ReactElement | null;
