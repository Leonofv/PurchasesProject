{"version":3,"file":"types.js","names":["chipsPropSize","chipsPropSizeDefault","chipsPropActiveView","chipsPropActiveViewDefault"],"sources":["../../../../../src/components/Chips/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\n\nimport { badgePropStatus } from '##/components/Badge';\nimport { AsAttributes, AsTags } from '##/utils/types/AsTags';\nimport { PropsWithHTMLAttributesAndRef } from '##/utils/types/PropsWithHTMLAttributes';\n\nexport const chipsPropSize = ['xs', 's', 'm', 'l'] as const;\nexport type ChipsPropSize = typeof chipsPropSize[number];\nexport const chipsPropSizeDefault: ChipsPropSize = 'm';\n\nexport const chipsPropActiveView = ['primary', 'secondary'] as const;\nexport type ChipsPropActiveView = typeof chipsPropActiveView[number];\nexport const chipsPropActiveViewDefault: ChipsPropActiveView = 'primary';\n\nexport type ChipsPropStatus = typeof badgePropStatus[number];\n\nexport type ChipsItemProps = {\n  size?: ChipsPropSize;\n  activeView?: ChipsPropActiveView;\n  interactive?: boolean;\n  onRightIconClick?: React.MouseEventHandler<HTMLButtonElement>;\n  iconLeft?: IconComponent;\n  iconRight?: IconComponent;\n  status?: ChipsPropStatus;\n  label: string;\n  active?: boolean;\n  disabled?: boolean;\n};\n\nexport type ChipsDefaultItem = Omit<\n  ChipsItemProps,\n  'size' | 'activeView' | 'interactive' | 'onRightIconClick'\n> & {\n  attributes?: Omit<AsAttributes, 'children' | 'ref'>;\n  as?: AsTags;\n  ref?: React.RefObject<HTMLElement>;\n};\n\n// export type ChipsPropGetItemKey<ITEM> = (item: ITEM) => ChipsDefaultItem['key'];\nexport type ChipsPropGetItemStatus<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['status'];\nexport type ChipsPropGetItemLabel<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['label'];\nexport type ChipsPropGetItemIconLeft<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['iconLeft'];\nexport type ChipsPropGetItemIconRight<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['iconRight'];\nexport type ChipsPropGetItemRef<ITEM> = (item: ITEM) => ChipsDefaultItem['ref'];\nexport type ChipsPropGetItemAs<ITEM> = (item: ITEM) => ChipsDefaultItem['as'];\nexport type ChipsPropGetItemAttributes<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['attributes'];\nexport type ChipsPropGetItemActive<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['active'];\nexport type ChipsPropGetItemDisabled<ITEM> = (\n  item: ITEM,\n) => ChipsDefaultItem['disabled'];\nexport type ChipsPropOnItemClick<ITEM> = (\n  item: ITEM,\n  props: { e: React.MouseEvent },\n) => void;\nexport type ChipsPropItemOnRightIconClick<ITEM> = (\n  item: ITEM,\n  props: { e: React.MouseEvent },\n) => void;\n\nexport type ChipsProps<ITEM = ChipsDefaultItem> = PropsWithHTMLAttributesAndRef<\n  {\n    size?: ChipsPropSize;\n    activeView?: ChipsPropActiveView;\n    items: ITEM[];\n    interactive?: boolean;\n    disabled?: boolean;\n    getItemStatus?: ChipsPropGetItemStatus<ITEM>;\n    getItemLabel?: ChipsPropGetItemLabel<ITEM>;\n    getItemIconLeft?: ChipsPropGetItemIconLeft<ITEM>;\n    getItemIconRight?: ChipsPropGetItemIconRight<ITEM>;\n    getItemRef?: ChipsPropGetItemRef<ITEM>;\n    getItemAs?: ChipsPropGetItemAs<ITEM>;\n    getItemAttributes?: ChipsPropGetItemAttributes<ITEM>;\n    getItemActive?: ChipsPropGetItemActive<ITEM>;\n    getItemDisabled?: ChipsPropGetItemDisabled<ITEM>;\n    onItemClick?: ChipsPropOnItemClick<ITEM>;\n    onItemRightIconClick?: ChipsPropItemOnRightIconClick<ITEM>;\n  },\n  HTMLDivElement\n> &\n  (ITEM extends { label: string }\n    ? {}\n    : {\n        getItemLabel: ChipsPropGetItemLabel<ITEM>;\n      });\n\nexport type ChipsComponent = <ITEM = ChipsDefaultItem>(\n  props: ChipsProps<ITEM>,\n) => React.ReactElement | null;\n"],"mappings":"AAMA,MAAO,IAAMA,cAAa,CAAG,CAAC,IAAD,CAAO,GAAP,CAAY,GAAZ,CAAiB,GAAjB,CAAtB,CAEP,MAAO,IAAMC,qBAAmC,CAAG,GAA5C,CAEP,MAAO,IAAMC,oBAAmB,CAAG,CAAC,SAAD,CAAY,WAAZ,CAA5B,CAEP,MAAO,IAAMC,2BAA+C,CAAG,SAAxD"}