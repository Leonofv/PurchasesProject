import { IconComponent, IconPropSize } from '@consta/icons/Icon';
import React from 'react';
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare type ChoiceGroupDefaultItem = {
    label: string;
    icon?: IconComponent;
    disabled?: boolean;
    attributes?: Omit<JSX.IntrinsicElements['label'], 'ref' | 'onChange' | 'children'>;
    ref?: React.RefObject<HTMLLabelElement>;
};
export declare const choiceGroupForms: readonly ["default", "brick", "round"];
export declare type ChoiceGroupPropForm = typeof choiceGroupForms[number];
export declare const choiceGroupDefaultForm: ChoiceGroupPropForm;
export declare const choiceGroupSizes: readonly ["xs", "s", "m", "l"];
export declare type ChoiceGroupPropSize = typeof choiceGroupSizes[number];
export declare const choiceGroupDefaultSize: ChoiceGroupPropSize;
export declare const choiceGroupViews: readonly ["primary", "ghost", "secondary"];
export declare type ChoiceGroupPropView = typeof choiceGroupViews[number];
export declare const choiceGroupDefaultView: ChoiceGroupPropView;
export declare const choiceGroupWidth: readonly ["default", "full"];
export declare type ChoiceGroupPropWidth = typeof choiceGroupWidth[number];
export declare const choiceGroupWidthDefault: ChoiceGroupPropWidth;
export declare type ChoiceGroupPropGetItemLabel<ITEM> = (item: ITEM) => string | number;
export declare type ChoiceGroupPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent | undefined;
export declare type ChoiceGroupPropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;
export declare type ChoiceGroupPropGetItemAttributes<ITEM> = (item: ITEM) => Omit<JSX.IntrinsicElements['label'], 'ref' | 'onChange' | 'children'> | undefined;
export declare type ChoiceGroupPropGetItemRef<ITEM> = (item: ITEM) => React.RefObject<HTMLLabelElement> | undefined;
export declare type ChoiceGroupPropValue<ITEM, MULTIPLE extends boolean> = (MULTIPLE extends true ? ITEM[] : ITEM) | null;
export declare type ChoiceGroupPropOnChange<ITEM, MULTIPLE extends boolean> = (value: MULTIPLE extends true ? ITEM[] | null : ITEM, props: {
    e: React.ChangeEvent<HTMLInputElement>;
}) => void;
export declare type ChoiceGroupProps<ITEM = ChoiceGroupDefaultItem, MULTIPLE extends boolean = false> = PropsWithHTMLAttributesAndRef<{
    size?: ChoiceGroupPropSize;
    form?: ChoiceGroupPropForm;
    view?: ChoiceGroupPropView;
    width?: ChoiceGroupPropWidth;
    onlyIcon?: boolean;
    iconSize?: IconPropSize;
    items: ITEM[];
    getItemLabel?: ChoiceGroupPropGetItemLabel<ITEM>;
    getItemIcon?: ChoiceGroupPropGetItemIcon<ITEM>;
    getItemAttributes?: ChoiceGroupPropGetItemAttributes<ITEM>;
    getItemRef?: ChoiceGroupPropGetItemRef<ITEM>;
    name: string;
    disabled?: boolean;
    getItemDisabled?: ChoiceGroupPropGetItemDisabled<ITEM>;
    value?: ChoiceGroupPropValue<ITEM, MULTIPLE>;
    onChange?: ChoiceGroupPropOnChange<ITEM, MULTIPLE>;
    multiple?: MULTIPLE;
    truncate?: boolean;
    children?: never;
}, HTMLDivElement> & (ITEM extends {
    label: ChoiceGroupDefaultItem['label'];
} ? {} : {
    getItemLabel: ChoiceGroupPropGetItemLabel<ITEM>;
});
export declare type ChoiceGroupItemProps = {
    icon?: IconComponent;
    onlyIcon?: boolean;
    iconSize?: IconPropSize;
    label: string;
    name: string;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
    checked: boolean;
    multiple: boolean;
    disabled?: boolean;
};
export declare type ChoiceGroupComponent = <ITEM, MULTIPLE extends boolean = false>(props: ChoiceGroupProps<ITEM, MULTIPLE>) => React.ReactElement | null;
