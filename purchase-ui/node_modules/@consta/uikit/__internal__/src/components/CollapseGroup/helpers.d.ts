import { IconComponent } from '@consta/icons/Icon';
import React from 'react';
import { CollapseIconPropDirection, CollapsePropForm, CollapsePropHorizontalSpace, CollapsePropIconView, CollapsePropSize, CollapsePropView } from "../Collapse";
import { PropsWithHTMLAttributesAndRef } from "../../utils/types/PropsWithHTMLAttributes";
export declare type DefaultItem = {
    label: React.ReactNode;
    content: React.ReactNode;
    rightSide?: React.ReactNode | React.ReactNode[];
};
export declare type CollapseGroupPropOnOpen<IS_ACCORDION> = (value: (IS_ACCORDION extends true ? number : number[]) | null, params: {
    e: React.MouseEvent<HTMLDivElement, MouseEvent>;
}) => void;
export declare type CollapseGroupPropOpened<IS_ACCORDION> = (IS_ACCORDION extends true ? number : number[]) | null | undefined;
declare type CollapseGroupPropGetItemLabel<ITEM> = (item: ITEM) => React.ReactNode;
declare type CollapseGroupPropGetItemContent<ITEM> = (item: ITEM) => React.ReactNode;
declare type CollapseGroupPropGetItemRightSide<ITEM> = (item: ITEM) => React.ReactNode | React.ReactNode[] | undefined;
export declare type CollapseGroupProps<ITEM, IS_ACCORDION extends boolean> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    isAccordion?: IS_ACCORDION;
    children?: never;
    icon?: IconComponent;
    divider?: boolean;
    size?: CollapsePropSize;
    form?: CollapsePropForm;
    view?: CollapsePropView;
    horizontalSpace?: CollapsePropHorizontalSpace;
    hoverEffect?: boolean;
    onOpen?: CollapseGroupPropOnOpen<IS_ACCORDION>;
    opened?: CollapseGroupPropOpened<IS_ACCORDION>;
    getItemLabel?: CollapseGroupPropGetItemLabel<ITEM>;
    getItemContent?: CollapseGroupPropGetItemContent<ITEM>;
    iconView?: CollapsePropIconView;
} & ({
    closeIcon: IconComponent;
    directionIcon?: never;
    closeDirectionIcon?: never;
} | {
    closeIcon?: never;
    directionIcon?: CollapseIconPropDirection;
    closeDirectionIcon?: CollapseIconPropDirection;
}) & ({
    iconPosition?: 'left';
    getItemRightSide?: CollapseGroupPropGetItemRightSide<ITEM>;
} | {
    iconPosition?: 'right';
    getItemRightSide?: never;
}), HTMLDivElement> & (ITEM extends {
    label: DefaultItem['label'];
} ? {} : {
    getItemLabel: CollapseGroupPropGetItemLabel<ITEM>;
}) & (ITEM extends {
    content: DefaultItem['content'];
} ? {} : {
    getItemContent: CollapseGroupPropGetItemContent<ITEM>;
});
export declare const defaultGetItemLabel: CollapseGroupPropGetItemLabel<DefaultItem>;
export declare const defaultGetItemContent: CollapseGroupPropGetItemContent<DefaultItem>;
export declare const defaultGetItemRightSide: CollapseGroupPropGetItemContent<DefaultItem>;
export declare type CollapseGroupComponent = <ITEM, IS_ACCORDION extends boolean = false>(props: CollapseGroupProps<ITEM, IS_ACCORDION>) => React.ReactElement | null;
export declare type CollapseGroupRenderFunction = <ITEM, IS_ACCORDION extends boolean = false>(props: CollapseGroupProps<ITEM, IS_ACCORDION>, ref: React.Ref<HTMLDivElement>) => React.ReactElement | null;
export declare function withDefaultGetters<ITEM, IS_ACCORDION extends boolean>(props: CollapseGroupProps<ITEM, IS_ACCORDION>): ({
    items: ITEM[];
    isAccordion?: IS_ACCORDION | undefined;
    children?: undefined;
    icon?: IconComponent<"span"> | undefined;
    divider?: boolean | undefined;
    size?: "s" | "m" | "xs" | "l" | "2xs" | undefined;
    form?: "default" | "brick" | "round" | undefined;
    view?: "primary" | "ghost" | "clear" | "secondary" | undefined;
    horizontalSpace?: "s" | "m" | "xs" | "l" | "2xs" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "3xs" | undefined;
    hoverEffect?: boolean | undefined;
    onOpen?: CollapseGroupPropOnOpen<IS_ACCORDION> | undefined;
    opened?: CollapseGroupPropOpened<IS_ACCORDION>;
    getItemLabel?: CollapseGroupPropGetItemLabel<ITEM> | undefined;
    getItemContent?: CollapseGroupPropGetItemContent<ITEM> | undefined;
    iconView?: "ghost" | "clear" | undefined;
} & {
    closeIcon: IconComponent<"span">;
    directionIcon?: undefined;
    closeDirectionIcon?: undefined;
} & {
    iconPosition?: "left" | undefined;
    getItemRightSide?: CollapseGroupPropGetItemRightSide<ITEM> | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "form" | "view" | "children" | "size" | "css" | "items" | "getItemLabel" | "icon" | "getItemRightSide" | "horizontalSpace" | "closeIcon" | "divider" | "hoverEffect" | "iconView" | "iconPosition" | "directionIcon" | "closeDirectionIcon" | "isAccordion" | "onOpen" | "opened" | "getItemContent"> & React.RefAttributes<HTMLDivElement> & (ITEM extends {
    label: React.ReactNode;
} ? {} : {
    getItemLabel: CollapseGroupPropGetItemLabel<ITEM>;
}) & (ITEM extends {
    content: React.ReactNode;
} ? {} : {
    getItemContent: CollapseGroupPropGetItemContent<ITEM>;
}) & {
    getItemLabel: CollapseGroupPropGetItemLabel<DefaultItem> | CollapseGroupPropGetItemLabel<ITEM>;
    getItemContent: CollapseGroupPropGetItemContent<DefaultItem> | CollapseGroupPropGetItemContent<ITEM>;
    getItemRightSide: CollapseGroupPropGetItemContent<DefaultItem> | CollapseGroupPropGetItemRightSide<ITEM>;
}) | ({
    items: ITEM[];
    isAccordion?: IS_ACCORDION | undefined;
    children?: undefined;
    icon?: IconComponent<"span"> | undefined;
    divider?: boolean | undefined;
    size?: "s" | "m" | "xs" | "l" | "2xs" | undefined;
    form?: "default" | "brick" | "round" | undefined;
    view?: "primary" | "ghost" | "clear" | "secondary" | undefined;
    horizontalSpace?: "s" | "m" | "xs" | "l" | "2xs" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "3xs" | undefined;
    hoverEffect?: boolean | undefined;
    onOpen?: CollapseGroupPropOnOpen<IS_ACCORDION> | undefined;
    opened?: CollapseGroupPropOpened<IS_ACCORDION>;
    getItemLabel?: CollapseGroupPropGetItemLabel<ITEM> | undefined;
    getItemContent?: CollapseGroupPropGetItemContent<ITEM> | undefined;
    iconView?: "ghost" | "clear" | undefined;
} & {
    closeIcon?: undefined;
    directionIcon?: "left" | "right" | "downRight" | "downLeft" | "upRight" | "upLeft" | "up" | "down" | undefined;
    closeDirectionIcon?: "left" | "right" | "downRight" | "downLeft" | "upRight" | "upLeft" | "up" | "down" | undefined;
} & {
    iconPosition?: "left" | undefined;
    getItemRightSide?: CollapseGroupPropGetItemRightSide<ITEM> | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "form" | "view" | "children" | "size" | "css" | "items" | "getItemLabel" | "icon" | "getItemRightSide" | "horizontalSpace" | "closeIcon" | "divider" | "hoverEffect" | "iconView" | "iconPosition" | "directionIcon" | "closeDirectionIcon" | "isAccordion" | "onOpen" | "opened" | "getItemContent"> & React.RefAttributes<HTMLDivElement> & (ITEM extends {
    label: React.ReactNode;
} ? {} : {
    getItemLabel: CollapseGroupPropGetItemLabel<ITEM>;
}) & (ITEM extends {
    content: React.ReactNode;
} ? {} : {
    getItemContent: CollapseGroupPropGetItemContent<ITEM>;
}) & {
    getItemLabel: CollapseGroupPropGetItemLabel<DefaultItem> | CollapseGroupPropGetItemLabel<ITEM>;
    getItemContent: CollapseGroupPropGetItemContent<DefaultItem> | CollapseGroupPropGetItemContent<ITEM>;
    getItemRightSide: CollapseGroupPropGetItemContent<DefaultItem> | CollapseGroupPropGetItemRightSide<ITEM>;
});
export {};
