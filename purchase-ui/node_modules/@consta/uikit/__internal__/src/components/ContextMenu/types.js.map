{"version":3,"file":"types.js","names":["defaultListPropForm","listPropForm","contextMenuSizes","contextMenuDefaultSize","contextMenuStatus","contextMenuDefaultStatus","contextMenuForm","defaultContextMenuForm","contextMenuPropSubMenuDirections","contextMenuPropDefaultSubMenuDirection"],"sources":["../../../../../src/components/ContextMenu/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\n\nimport {\n  defaultListPropForm,\n  ListPropForm,\n  listPropForm,\n} from '##/components/ListCanary';\nimport { ComponentSize } from '##/hooks/useComponentSize';\nimport { Animate } from '##/mixs/MixPopoverAnimate';\nimport { AsAttributes, AsTags } from '##/utils/types/AsTags';\n\nimport { ClickOutsideHandler } from '../../hooks/useClickOutside/useClickOutside';\nimport { PropsWithAsAttributes } from '../../utils/types/PropsWithAsAttributes';\nimport {\n  PropsWithHTMLAttributes,\n  PropsWithHTMLAttributesAndRef,\n} from '../../utils/types/PropsWithHTMLAttributes';\nimport { Direction, PopoverPropOffset, Position } from '../Popover/Popover';\n\nexport const contextMenuSizes = ['m', 'xs', 's', 'l'] as const;\nexport type ContextMenuPropSize = typeof contextMenuSizes[number];\nexport const contextMenuDefaultSize: ContextMenuPropSize = contextMenuSizes[0];\n\nexport const contextMenuStatus = ['alert', 'success', 'warning'] as const;\nexport type ContextMenuStatus = typeof contextMenuStatus[number];\nexport const contextMenuDefaultStatus: ContextMenuStatus = contextMenuStatus[0];\n\nexport const contextMenuForm = listPropForm;\nexport type ContextMenuForm = ListPropForm;\nexport const defaultContextMenuForm = defaultListPropForm;\n\nexport const contextMenuPropSubMenuDirections = [\n  'rightStartUp',\n  'rightStartDown',\n  'leftStartUp',\n  'leftStartDown',\n] as const;\nexport type ContextMenuPropSubMenuDirection =\n  typeof contextMenuPropSubMenuDirections[number];\nexport const contextMenuPropDefaultSubMenuDirection: ContextMenuPropSubMenuDirection =\n  contextMenuPropSubMenuDirections[0];\n\nexport type ContextMenuPropOnItemClick<ITEM> = (\n  item: ITEM,\n  params: {\n    e: React.MouseEvent;\n  },\n) => void;\n\nexport type ContextMenuGroupDefault = {\n  label?: string;\n  id: number;\n};\n\nexport type ContextMenuItemDefault = {\n  label: string | number;\n  key?: string | number;\n  rightSide?: React.ReactNode;\n  rightIcon?: IconComponent;\n  leftSide?: React.ReactNode;\n  leftIcon?: IconComponent;\n  subMenu?: ContextMenuItemDefault[];\n  status?: ContextMenuStatus;\n  disabled?: boolean;\n  groupId?: number;\n  onClick?: React.MouseEventHandler;\n  as?: AsTags;\n  attributes?: AsAttributes;\n};\n\nexport type ContextMenuPropSortGroup = (\n  a: string | number,\n  b: string | number,\n) => number;\n\nexport type ContextMenuPropGetItemLabel<ITEM> = (item: ITEM) => string | number;\n\nexport type ContextMenuPropGetItemRightSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type ContextMenuPropGetItemLeftSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type ContextMenuPropGetItemSubMenu<ITEM> = (\n  item: ITEM,\n) => ITEM[] | undefined;\n\nexport type ContextMenuPropGetItemStatus<ITEM> = (\n  item: ITEM,\n) => ContextMenuStatus | undefined;\n\nexport type ContextMenuPropGetItemKey<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\n\nexport type ContextMenuPropGetItemOnClick<ITEM> = (\n  item: ITEM,\n) => React.MouseEventHandler | undefined;\n\nexport type ContextMenuPropGetItemDisabled<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\n\nexport type ContextMenuPropGetItemAs<ITEM> = (item: ITEM) => AsTags | undefined;\n\nexport type ContextMenuPropGetItemAttributes<ITEM> = (\n  item: ITEM,\n) => AsAttributes | undefined;\n\nexport type ContextMenuPropGetItemGroupId<ITEM> = (\n  item: ITEM,\n) => number | undefined;\n\nexport type ContextMenuPropGetItemRightIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\n\nexport type ContextMenuPropGetItemLeftIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\n\nexport type ContextMenuPropGetGroupLabel<GROUP> = (\n  group: GROUP,\n) => string | undefined;\nexport type ContextMenuPropGetGroupId<GROUP> = (group: GROUP) => number;\n\ntype PositioningProps =\n  | {\n      anchorRef: React.RefObject<HTMLElement>;\n      position?: never;\n    }\n  | {\n      anchorRef?: never;\n      position: Position;\n    };\n\nexport type MappersItem<ITEM> = {\n  getItemLabel?: ContextMenuPropGetItemLabel<ITEM>;\n  getItemRightSide?: ContextMenuPropGetItemRightSide<ITEM>;\n  getItemLeftSide?: ContextMenuPropGetItemLeftSide<ITEM>;\n  getItemSubMenu?: ContextMenuPropGetItemSubMenu<ITEM>;\n  getItemStatus?: ContextMenuPropGetItemStatus<ITEM>;\n  getItemDisabled?: ContextMenuPropGetItemDisabled<ITEM>;\n  getItemKey?: ContextMenuPropGetItemKey<ITEM>;\n  getItemOnClick?: ContextMenuPropGetItemOnClick<ITEM>;\n  getItemAs?: ContextMenuPropGetItemAs<ITEM>;\n  getItemAttributes?: ContextMenuPropGetItemAttributes<ITEM>;\n  getItemGroupId?: ContextMenuPropGetItemGroupId<ITEM>;\n  getItemLeftIcon?: ContextMenuPropGetItemLeftIcon<ITEM>;\n  getItemRightIcon?: ContextMenuPropGetItemRightIcon<ITEM>;\n};\n\nexport type MappersGroup<GROUP> = {\n  getGroupLabel?: ContextMenuPropGetGroupLabel<GROUP>;\n  getGroupId?: ContextMenuPropGetGroupId<GROUP>;\n};\n\nexport type Level<ITEM> = {\n  items: ITEM[];\n  activeItem?: string;\n  direction?: Direction;\n  possibleDirections?: readonly Direction[];\n  offset?: PopoverPropOffset;\n  parent?: ITEM;\n  anchorRef?: React.RefObject<HTMLElement>;\n  position?: Position;\n};\n\nexport type AddLevel<ITEM> = (params: {\n  level: number;\n  items: ITEM[];\n  parent?: ITEM;\n  anchorRef?: React.RefObject<HTMLElement>;\n  position?: Position;\n  activeItem: string;\n}) => void;\n\nexport type ContextMenuProps<\n  ITEM = ContextMenuItemDefault,\n  GROUP = ContextMenuGroupDefault,\n> = PropsWithHTMLAttributesAndRef<\n  {\n    items: ITEM[];\n    size?: ContextMenuPropSize;\n    direction?: Direction;\n    offset?: PopoverPropOffset;\n    groups?: GROUP[];\n    sortGroup?: ContextMenuPropSortGroup;\n    onItemClick?: ContextMenuPropOnItemClick<ITEM>;\n    possibleDirections?: readonly Direction[];\n    subMenuDirection?: ContextMenuPropSubMenuDirection;\n    spareDirection?: Direction;\n    onSetDirection?: (direction: Direction) => void;\n    onClickOutside?: ClickOutsideHandler;\n    isOpen?: boolean;\n    form?: ContextMenuForm;\n    isMobile?: boolean;\n    onEsc?: React.KeyboardEventHandler;\n  } & MappersItem<ITEM> &\n    MappersGroup<GROUP> &\n    PositioningProps,\n  HTMLDivElement\n> &\n  (GROUP extends { id: ContextMenuGroupDefault['id'] | unknown }\n    ? {}\n    : { getGroupId: ContextMenuPropGetGroupId<GROUP> }) &\n  (ITEM extends { label: ContextMenuItemDefault['label'] }\n    ? {}\n    : { getItemLabel: ContextMenuPropGetItemLabel<ITEM> });\n\nexport type ContextMenuLevelsProps<\n  ITEM = ContextMenuItemDefault,\n  GROUP = ContextMenuGroupDefault,\n> = ContextMenuProps<ITEM, GROUP> & {\n  setComponentSize: React.Dispatch<React.SetStateAction<ComponentSize>>;\n  disableAnimationBack: () => void;\n  enableAnimationBack: () => void;\n};\n\nexport type ContextMenuLevelsComponent = <\n  ITEM = ContextMenuItemDefault,\n  GROUP = ContextMenuGroupDefault,\n>(\n  props: ContextMenuLevelsProps<ITEM, GROUP>,\n) => React.ReactElement | null;\n\nexport type ContextMenuComponent = <\n  ITEM = ContextMenuItemDefault,\n  GROUP = ContextMenuGroupDefault,\n>(\n  props: ContextMenuProps<ITEM, GROUP>,\n) => React.ReactElement | null;\n\nexport type ContextMenuLevelProps<\n  ITEM = ContextMenuItemDefault,\n  GROUP = ContextMenuGroupDefault,\n> = Omit<\n  ContextMenuProps<ITEM, GROUP>,\n  | 'subMenuDirection'\n  | 'onClickOutside'\n  | 'setComponentSize'\n  | 'animationBack'\n  | 'disableAnimationBack'\n  | 'enableAnimationBack'\n  | keyof MappersItem<ITEM>\n  | keyof MappersGroup<GROUP>\n> & {\n  parent?: ITEM;\n  activeLevelDepth: number;\n  levelDepth: number;\n  addLevel: AddLevel<ITEM>;\n  deleteLevel: (level: number) => void;\n  activeItem?: string;\n  onSetDirection?: (direction: Direction) => void;\n  hoveredParenLevel: number;\n  setHoveredParenLevel: (level: number) => void;\n  onEsc?: React.KeyboardEventHandler;\n  animate: Animate;\n} & Required<MappersItem<ITEM>> &\n  Required<MappersGroup<GROUP>>;\n\nexport type ContextMenuLevelComponent = <ITEM, GROUP>(\n  props: ContextMenuLevelProps<ITEM, GROUP>,\n  ref: React.Ref<HTMLElement>,\n) => React.ReactElement | null;\n\nexport type ContextMenuItemProps<AS extends AsTags = 'div'> =\n  PropsWithAsAttributes<\n    Omit<ContextMenuItemDefault, 'onClick' | 'attributes' | 'key'> & {\n      size?: ContextMenuPropSize;\n      active: boolean;\n      withSubMenu: boolean;\n    },\n    AS\n  > &\n    React.RefAttributes<HTMLDivElement>;\n\nexport type ContextMenuItemComponent = <AS extends AsTags = 'div'>(\n  props: ContextMenuItemProps<AS>,\n  ref: React.Ref<HTMLElement>,\n) => React.ReactElement | null;\n\nexport type GetLevelsParams<ITEM> = {\n  levels: Level<ITEM>[];\n  items: ITEM[];\n  getItemSubMenu: ContextMenuPropGetItemSubMenu<ITEM>;\n  getItemKey: ContextMenuPropGetItemKey<ITEM>;\n};\n\nexport type ContextMenuWrapperProps = PropsWithHTMLAttributes<\n  {\n    children: React.ReactNode;\n    isOpen?: boolean;\n    isMobile?: boolean;\n    form?: ContextMenuForm;\n    onClickOutside?: ClickOutsideHandler;\n    spareDirection?: Direction;\n    possibleDirections?: readonly Direction[];\n    size?: ContextMenuPropSize;\n    direction?: Direction;\n    offset?: PopoverPropOffset;\n    anchorRef?: React.RefObject<HTMLElement>;\n    position?: Position;\n    onSetDirection?: (direction: Direction) => void;\n    className?: string;\n    animationBack?: boolean;\n  },\n  HTMLDivElement\n>;\n\nexport type ContextMenuLevelWrapperProps = PropsWithHTMLAttributesAndRef<\n  {\n    children: React.ReactNode;\n    isMobile?: boolean;\n    onClickOutside?: ClickOutsideHandler;\n    spareDirection?: Direction;\n    possibleDirections?: readonly Direction[];\n    size?: ContextMenuPropSize;\n    direction?: Direction;\n    offset?: PopoverPropOffset;\n    anchorRef?: React.RefObject<HTMLElement>;\n    position?: Position;\n    onSetDirection?: (direction: Direction) => void;\n  },\n  HTMLDivElement\n>;\n"],"mappings":"AAEA,OACEA,mBADF,CAGEC,YAHF,qBAiBA,MAAO,IAAMC,iBAAgB,CAAG,CAAC,GAAD,CAAM,IAAN,CAAY,GAAZ,CAAiB,GAAjB,CAAzB,CAEP,MAAO,IAAMC,uBAA2C,CAAGD,gBAAgB,CAAC,CAAD,CAApE,CAEP,MAAO,IAAME,kBAAiB,CAAG,CAAC,OAAD,CAAU,SAAV,CAAqB,SAArB,CAA1B,CAEP,MAAO,IAAMC,yBAA2C,CAAGD,iBAAiB,CAAC,CAAD,CAArE,CAEP,MAAO,IAAME,gBAAe,CAAGL,YAAxB,CAEP,MAAO,IAAMM,uBAAsB,CAAGP,mBAA/B,CAEP,MAAO,IAAMQ,iCAAgC,CAAG,CAC9C,cAD8C,CAE9C,gBAF8C,CAG9C,aAH8C,CAI9C,eAJ8C,CAAzC,CAQP,MAAO,IAAMC,uCAAuE,CAClFD,gCAAgC,CAAC,CAAD,CAD3B"}