import React from 'react';
export declare const DatePickerFieldTypeTime: React.ForwardRefExoticComponent<{
    className?: string | undefined;
    value?: Date | null | undefined;
    onChange?: ((value: Date | null, props: {
        e: Event;
    }) => void) | undefined;
    onError?: import("..").DatePickerPropOnError | undefined;
    id?: string | undefined;
    name?: string | undefined;
    disabled?: boolean | undefined;
    size?: "s" | "m" | "xs" | "l" | undefined;
    view?: "default" | "clear" | undefined;
    form?: "default" | "defaultClear" | "defaultBrick" | "brick" | "brickDefault" | "brickClear" | "brickRound" | "round" | "roundClear" | "roundBrick" | "clearRound" | "clearDefault" | "clearBrick" | "clearClear" | undefined;
    status?: "alert" | "warning" | "success" | undefined;
    onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
    autoFocus?: boolean | undefined;
    placeholder?: string | undefined;
    leftSide?: string | import("@consta/icons/Icon").IconComponent<"span"> | undefined;
    rightSide?: string | import("@consta/icons/Icon").IconComponent<"span"> | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    tabIndex?: number | undefined;
    inputRef?: React.Ref<HTMLInputElement | HTMLTextAreaElement> | undefined;
    ariaLabel?: string | undefined;
    iconSize?: "s" | "m" | "xs" | "l" | undefined;
    children?: undefined;
    format?: string | undefined;
    separator?: string | undefined;
    minDate?: Date | undefined;
    maxDate?: Date | undefined;
    focused?: boolean | undefined;
    multiplicitySeconds?: number | undefined;
    multiplicityMinutes?: number | undefined;
    multiplicityHours?: number | undefined;
    label?: string | undefined;
    labelIcon?: import("@consta/icons/Icon").IconComponent<"span"> | undefined;
    caption?: string | undefined;
    labelPosition?: "left" | "top" | undefined;
    withClearButton?: boolean | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "caption" | "form" | "label" | "view" | "name" | "className" | "id" | "placeholder" | "tabIndex" | "children" | "onFocus" | "onBlur" | "onChange" | "onError" | "autoFocus" | "disabled" | "value" | "readOnly" | "required" | "size" | "separator" | "status" | "css" | "inputRef" | "focused" | "ariaLabel" | "labelIcon" | "labelPosition" | "leftSide" | "rightSide" | "withClearButton" | "iconSize" | "minDate" | "maxDate" | "multiplicitySeconds" | "multiplicityMinutes" | "multiplicityHours" | "format"> & React.RefAttributes<HTMLDivElement>>;
