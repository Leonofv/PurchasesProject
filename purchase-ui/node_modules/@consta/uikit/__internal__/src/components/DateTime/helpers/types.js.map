{"version":3,"file":"types.js","names":["dateTimePropView","dateTimePropViewDefault","dateTimePropType","dateTimePropTypeDefault","moveTypes"],"sources":["../../../../../../src/components/DateTime/helpers/types.ts"],"sourcesContent":["import { DateRange } from '../../../utils/types/Date';\nimport { PropsWithHTMLAttributesAndRef } from '../../../utils/types/PropsWithHTMLAttributes';\n\nexport const dateTimePropView = ['classic', 'book', 'slider'] as const;\nexport type DateTimePropView = typeof dateTimePropView[number];\nexport const dateTimePropViewDefault = dateTimePropView[0];\n\nexport const dateTimePropType = [\n  'date',\n  'month',\n  'year',\n  'time',\n  'date-time',\n] as const;\nexport type DateTimePropType = typeof dateTimePropType[number];\nexport const dateTimePropTypeDefault = dateTimePropType[0];\n\nexport type DateTimePropDisableDates = Array<Date | [Date, Date]>;\n\nexport type CapableRangeType = 'date' | 'month' | 'year' | 'date-time';\n\nexport type DateTimePropValue<TYPE> = TYPE extends CapableRangeType\n  ? Date | DateRange\n  : Date;\n\nexport type DateTimePropOnChange = (\n  value: Date,\n  props: {\n    e: React.MouseEvent<HTMLButtonElement>;\n  },\n) => void;\n\nexport type DateTimePropOnChangeRange<TYPE> = TYPE extends CapableRangeType\n  ? (\n      value: DateRange,\n      props: {\n        e: React.MouseEvent<HTMLButtonElement>;\n      },\n    ) => void\n  : never;\n\ntype LocaleWords = {\n  words?: {\n    hours?: string;\n    minutes?: string;\n    seconds?: string;\n  };\n};\n\nexport type DateTimePropLocale = Locale & LocaleWords;\n\nexport const moveTypes = ['year', 'month', 'day', 'time'] as const;\nexport type MoveType = typeof moveTypes[number];\n\ntype DateTimePropTimeFor<TYPE> = TYPE extends 'date-time'\n  ? 'start' | 'end'\n  : never;\n\nexport type DateTimeProps<TYPE extends DateTimePropType = 'date'> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      currentVisibleDate?: Date;\n      type?: TYPE;\n      value?: DateTimePropValue<TYPE>;\n      onChange?: DateTimePropOnChange;\n      onChangeRange?: DateTimePropOnChangeRange<TYPE>;\n      minDate?: Date;\n      maxDate?: Date;\n      events?: Date[];\n      view?: TYPE extends CapableRangeType ? DateTimePropView : 'classic';\n      locale?: DateTimePropLocale;\n      children?: never;\n      disableDates?: DateTimePropDisableDates;\n      onChangeCurrentVisibleDate?: (date: Date) => void;\n      multiplicitySeconds?: number;\n      multiplicityMinutes?: number;\n      multiplicityHours?: number;\n      onMove?: (type: MoveType) => void;\n      timeFor?: DateTimePropTimeFor<TYPE>;\n    },\n    HTMLDivElement\n  >;\n\nexport type DateTimeComponent = <TYPE extends DateTimePropType = 'date'>(\n  props: DateTimeProps<TYPE>,\n) => React.ReactElement | null;\n\nexport type DateTimeTypeComponent<TYPE extends DateTimePropType> = (\n  props: Omit<DateTimeProps<TYPE>, 'type'>,\n) => React.ReactElement | null;\n\nexport type HandleSelectDate = (\n  value: Date,\n  props: {\n    value: Date;\n    e: React.MouseEvent<HTMLButtonElement>;\n  },\n) => void;\n"],"mappings":"AAGA,MAAO,IAAMA,iBAAgB,CAAG,CAAC,SAAD,CAAY,MAAZ,CAAoB,QAApB,CAAzB,CAEP,MAAO,IAAMC,wBAAuB,CAAGD,gBAAgB,CAAC,CAAD,CAAhD,CAEP,MAAO,IAAME,iBAAgB,CAAG,CAC9B,MAD8B,CAE9B,OAF8B,CAG9B,MAH8B,CAI9B,MAJ8B,CAK9B,WAL8B,CAAzB,CAQP,MAAO,IAAMC,wBAAuB,CAAGD,gBAAgB,CAAC,CAAD,CAAhD,CAoCP,MAAO,IAAME,UAAS,CAAG,CAAC,MAAD,CAAS,OAAT,CAAkB,KAAlB,CAAyB,MAAzB,CAAlB"}