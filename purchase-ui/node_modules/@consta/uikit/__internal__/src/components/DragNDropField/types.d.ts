/// <reference types="react" />
import { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';
import { Locale } from './locale';
export declare type DragNDropFieldPropLocale = Locale;
export declare type FileError = {
    message: string;
    code: 'file-too-large' | 'file-too-small' | 'too-many-files' | 'file-invalid-type';
};
export declare type FileRejection = {
    file: File;
    errors: FileError[];
};
export declare type DragNDropFieldPropErrorMessages = Partial<Record<FileError['code'], string | ((file: File | undefined, error?: FileError) => string)>>;
export declare type DragNDropFieldChildrenRenderProp = (props: {
    openFileDialog: () => void;
    locale: Required<DragNDropFieldPropLocale>;
} & Pick<DragNDropFieldProps, 'accept' | 'maxSize' | 'multiple' | 'disabled' | 'minSize'>) => React.ReactNode;
export declare type FileSizes = {
    minSize?: number;
    maxSize?: number;
};
export declare type DragNDropFieldProps = PropsWithHTMLAttributes<{
    accept?: string | string[];
    maxSize?: number;
    minSize?: number;
    multiple?: boolean;
    onDropFiles: (files: File[]) => void;
    children?: React.ReactNode | DragNDropFieldChildrenRenderProp;
    locale?: DragNDropFieldPropLocale;
    disabled?: boolean;
}, HTMLDivElement>;
