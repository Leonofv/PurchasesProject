{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/components/DragNDropField/types.ts"],"sourcesContent":["import { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\nimport { Locale } from './locale';\n\nexport type DragNDropFieldPropLocale = Locale;\n\nexport type FileError = {\n  message: string;\n  code:\n    | 'file-too-large'\n    | 'file-too-small'\n    | 'too-many-files'\n    | 'file-invalid-type';\n};\n\nexport type FileRejection = {\n  file: File;\n  errors: FileError[];\n};\n\nexport type DragNDropFieldPropErrorMessages = Partial<\n  Record<\n    FileError['code'],\n    string | ((file: File | undefined, error?: FileError) => string)\n  >\n>;\n\nexport type DragNDropFieldChildrenRenderProp = (\n  props: {\n    openFileDialog: () => void;\n    locale: Required<DragNDropFieldPropLocale>;\n  } & Pick<\n    DragNDropFieldProps,\n    'accept' | 'maxSize' | 'multiple' | 'disabled' | 'minSize'\n  >,\n) => React.ReactNode;\n\nexport type FileSizes = {\n  minSize?: number;\n  maxSize?: number;\n};\n\nexport type DragNDropFieldProps = PropsWithHTMLAttributes<\n  {\n    accept?: string | string[];\n    maxSize?: number;\n    minSize?: number;\n    multiple?: boolean;\n    onDropFiles: (files: File[]) => void;\n    children?: React.ReactNode | DragNDropFieldChildrenRenderProp;\n    locale?: DragNDropFieldPropLocale;\n    disabled?: boolean;\n  },\n  HTMLDivElement\n>;\n"],"mappings":""}