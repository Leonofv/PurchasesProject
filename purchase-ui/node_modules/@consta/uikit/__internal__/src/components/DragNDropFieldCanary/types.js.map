{"version":3,"file":"types.js","names":["dragNDropFieldInformerPropStatus"],"sources":["../../../../../src/components/DragNDropFieldCanary/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\nimport { Accept, DropEvent, FileRejection } from 'react-dropzone';\n\nimport { PropsWithHTMLAttributes } from '##/utils/types/PropsWithHTMLAttributes';\n\nexport type DragNDropFieldChildrenRenderFn = (props: {\n  openFileDialog: () => void;\n  isFocused: boolean;\n  isDragActive: boolean;\n  isDragAccept: boolean;\n  isDragReject: boolean;\n  isFileDialogActive: boolean;\n  acceptedFiles: File[];\n  fileRejections: FileRejection[];\n}) => React.ReactNode;\n\nexport type DragNDropFieldContentProps = {\n  openFileDialog: () => void;\n  locale: Required<DragNDropFieldPropLocale>;\n  isFocused: boolean;\n  isDragActive: boolean;\n  isDragAccept: boolean;\n  isDragReject: boolean;\n  isFileDialogActive: boolean;\n  acceptedFiles: File[];\n  fileRejections: FileRejection[];\n} & Pick<\n  DragNDropFieldProps,\n  'accept' | 'maxSize' | 'multiple' | 'disabled' | 'minSize'\n>;\n\nexport type FileSizes = {\n  minSize?: number;\n  maxSize?: number;\n};\n\nexport type DragNDropFieldProps = PropsWithHTMLAttributes<\n  {\n    accept?: Accept;\n    maxSize?: number;\n    minSize?: number;\n    maxFiles?: number;\n    multiple?: boolean;\n    disabled?: boolean;\n    children?: React.ReactNode | DragNDropFieldChildrenRenderFn;\n    locale?: DragNDropFieldPropLocale;\n    onDrop?: <T extends File>(\n      acceptedFiles: T[],\n      fileRejections: FileRejection[],\n      event: DropEvent,\n    ) => void;\n    onDropAccepted?: <T extends File>(files: T[]) => void;\n    onDropRejected?: (\n      fileRejections: FileRejection[],\n      event: DropEvent,\n    ) => void;\n    onError?: (err: Error) => void;\n  },\n  HTMLDivElement\n>;\n\nexport type LocaleError =\n  | string\n  | ((props: { file: File; sizes?: FileSizes }) => string);\n\nexport type LocaleLabel = string | ((props: { fileText: string }) => string);\n\nexport type DragNDropFieldPropLocale = {\n  'file-invalid-type'?: LocaleError;\n  'file-too-large'?: LocaleError;\n  'file-too-small'?: LocaleError;\n  'too-many-files'?: string;\n  'general-error'?: string;\n  'fit-files'?: string;\n  'file'?: string;\n  'files'?: string;\n  'before'?: string;\n  'from'?: string;\n  'gigabyte'?: string;\n  'megabyte'?: string;\n  'kilobyte'?: string;\n  'byte'?: string;\n  'call-to-action'?: LocaleLabel;\n  'action-button'?: LocaleLabel;\n  'drag-active-message'?: string;\n};\n\nexport const dragNDropFieldInformerPropStatus = [\n  'default',\n  'alert',\n  'warning',\n] as const;\n\nexport type DragNDropFieldInformerPropStatus =\n  typeof dragNDropFieldInformerPropStatus[number];\n\nexport type DragNDropFieldInformerProps = {\n  status?: DragNDropFieldInformerPropStatus;\n  icon?: IconComponent;\n  loading?: boolean | number;\n  text?: string;\n  withButton?: boolean;\n  buttonIcon?: IconComponent;\n  buttonLabel?: string;\n  onButtonClick?: () => void;\n};\n"],"mappings":"AAuFA,MAAO,IAAMA,iCAAgC,CAAG,CAC9C,SAD8C,CAE9C,OAF8C,CAG9C,SAH8C,CAAzC"}