import React from 'react';
import { EventInterceptorHandler } from '../EventInterceptor';
export declare const useCheckboxEventsHandler: <P extends {
    checked: boolean | undefined;
    size?: "s" | "m" | "xs" | "l" | undefined;
    view?: "primary" | "ghost" | undefined;
    align?: "center" | "top" | undefined;
    disabled?: boolean | undefined;
    intermediate?: boolean | undefined;
    label?: string | undefined;
    onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;
    name?: string | undefined;
    onFocus?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLInputElement> | undefined;
    autoFocus?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    step?: string | number | undefined;
    tabIndex?: number | undefined;
    inputRef?: React.Ref<HTMLInputElement> | undefined;
    children?: undefined;
    for?: string | undefined;
    inputId?: string | undefined;
} & Omit<React.HTMLAttributes<HTMLLabelElement>, "css" | keyof {
    checked: boolean | undefined;
    size?: "s" | "m" | "xs" | "l" | undefined;
    view?: "primary" | "ghost" | undefined;
    align?: "center" | "top" | undefined;
    disabled?: boolean | undefined;
    intermediate?: boolean | undefined;
    label?: string | undefined;
    onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;
    name?: string | undefined;
    onFocus?: React.FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLInputElement> | undefined;
    autoFocus?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    step?: string | number | undefined;
    tabIndex?: number | undefined;
    inputRef?: React.Ref<HTMLInputElement> | undefined;
    children?: undefined;
    for?: string | undefined;
    inputId?: string | undefined;
}> & React.RefAttributes<HTMLLabelElement>>(props: P, handler: EventInterceptorHandler, ref: React.RefObject<HTMLLabelElement>) => P;
