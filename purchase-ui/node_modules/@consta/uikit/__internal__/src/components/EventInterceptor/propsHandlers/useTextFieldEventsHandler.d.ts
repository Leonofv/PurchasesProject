import { IconComponent, IconPropSize } from '@consta/icons/Icon';
import React from 'react';
import { AutoCompete } from '../../../utils/types/AutoComplete';
import { TextFieldPropForm, TextFieldPropId, TextFieldPropName, TextFieldPropOnChange, TextFieldPropSize, TextFieldPropStatus, TextFieldPropValue, TextFieldPropView } from '../../TextField/TextField';
import { EventInterceptorHandler } from '../EventInterceptor';
export declare type Props = {
    className?: string;
    value?: TextFieldPropValue;
    onChange?: TextFieldPropOnChange;
    id?: TextFieldPropId;
    name?: TextFieldPropName;
    type?: string;
    disabled?: boolean;
    cols?: number;
    maxLength?: number;
    size?: TextFieldPropSize;
    view?: TextFieldPropView;
    form?: TextFieldPropForm;
    state?: TextFieldPropStatus;
    onFocus?: React.FocusEventHandler<HTMLElement>;
    onBlur?: React.FocusEventHandler<HTMLElement>;
    autoFocus?: boolean;
    placeholder?: string;
    leftSide?: string | IconComponent;
    rightSide?: string | IconComponent;
    autoComplete?: AutoCompete;
    max?: number | string;
    min?: number | string;
    readOnly?: boolean;
    required?: boolean;
    step?: number | string;
    tabIndex?: number;
    inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;
    ariaLabel?: string;
    iconSize?: IconPropSize;
    children?: never;
};
export declare const useTextFieldEventsHandler: <P extends import("../../TextField/types").TextFieldProps<string>>(props: P, handler: EventInterceptorHandler, ref: React.RefObject<HTMLDivElement>) => P;
