{"version":3,"file":"useTextFieldEventsHandler.js","names":["React","useTextFieldEventsHandler","props","handler","ref","useState","inputChanged","setInputChanged","newProps","useEffect","value","onFocus","onfocusArgs","onBlur","component","event","options","placeholder","pageURL","window","location","href","DOMRef","current","onBlurArgs"],"sources":["../../../../../../src/components/EventInterceptor/propsHandlers/useTextFieldEventsHandler.tsx"],"sourcesContent":["import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { AutoCompete } from '../../../utils/types/AutoComplete';\nimport {\n  TextField,\n  TextFieldPropForm,\n  TextFieldPropId,\n  TextFieldPropName,\n  TextFieldPropOnChange,\n  TextFieldPropSize,\n  TextFieldPropStatus,\n  TextFieldPropValue,\n  TextFieldPropView,\n} from '../../TextField/TextField';\nimport { EventInterceptorHandler } from '../EventInterceptor';\n\nexport type Props = {\n  className?: string;\n  value?: TextFieldPropValue;\n  onChange?: TextFieldPropOnChange;\n  id?: TextFieldPropId;\n  name?: TextFieldPropName;\n  type?: string;\n  disabled?: boolean;\n  cols?: number;\n  maxLength?: number;\n  size?: TextFieldPropSize;\n  view?: TextFieldPropView;\n  form?: TextFieldPropForm;\n  state?: TextFieldPropStatus;\n  onFocus?: React.FocusEventHandler<HTMLElement>;\n  onBlur?: React.FocusEventHandler<HTMLElement>;\n  autoFocus?: boolean;\n  placeholder?: string;\n  leftSide?: string | IconComponent;\n  rightSide?: string | IconComponent;\n  autoComplete?: AutoCompete;\n  max?: number | string;\n  min?: number | string;\n  readOnly?: boolean;\n  required?: boolean;\n  step?: number | string;\n  tabIndex?: number;\n  inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;\n  ariaLabel?: string;\n  iconSize?: IconPropSize;\n  children?: never;\n};\n\ntype TextFieldProps = Parameters<typeof TextField>[0];\n\nexport const useTextFieldEventsHandler = <P extends TextFieldProps>(\n  props: P,\n  handler: EventInterceptorHandler,\n  ref: React.RefObject<HTMLDivElement>,\n): P => {\n  const [inputChanged, setInputChanged] = React.useState<boolean>(false);\n  const newProps: P = { ...props };\n\n  React.useEffect(() => {\n    setInputChanged(true);\n  }, [newProps.value]);\n\n  newProps.onFocus = (...onfocusArgs) => {\n    setInputChanged(false);\n\n    return props.onFocus?.(...onfocusArgs);\n  };\n\n  newProps.onBlur = (...onBlurArgs) => {\n    const value = {\n      component: 'TextField' as const,\n      event: 'change',\n      options: {\n        placeholder: newProps.placeholder,\n        pageURL: window.location.href,\n        DOMRef: ref.current,\n        value: newProps.value,\n        props: newProps,\n      },\n    };\n    if (inputChanged) {\n      handler!(value);\n    }\n\n    return props.onBlur?.(...onBlurArgs);\n  };\n\n  return newProps;\n};\n"],"mappings":"suBACA,MAAOA,MAAP,KAAkB,OAAlB,CAmDA,MAAO,IAAMC,0BAAyB,CAAG,SACvCC,CADuC,CAEvCC,CAFuC,CAGvCC,CAHuC,CAIjC,OACkCJ,KAAK,CAACK,QAAN,IADlC,uBACCC,CADD,MACeC,CADf,MAEAC,CAAW,kBAAQN,CAAR,CAFX,CAiCN,MA7BAF,MAAK,CAACS,SAAN,CAAgB,UAAM,CACpBF,CAAe,IAChB,CAFD,CAEG,CAACC,CAAQ,CAACE,KAAV,CAFH,CA6BA,CAzBAF,CAAQ,CAACG,OAAT,CAAmB,UAAoB,OACrCJ,CAAe,IADsB,4BAAhBK,CAAgB,sBAAhBA,CAAgB,iBAGrC,iBAAOV,CAAK,CAACS,OAAb,qBAAO,gBAAAT,CAAK,QAAL,CAAmBU,CAAnB,EACR,CAqBD,CAnBAJ,CAAQ,CAACK,MAAT,CAAkB,UAAmB,OAC7BH,CAAK,CAAG,CACZI,SAAS,CAAE,WADC,CAEZC,KAAK,CAAE,QAFK,CAGZC,OAAO,CAAE,CACPC,WAAW,CAAET,CAAQ,CAACS,WADf,CAEPC,OAAO,CAAEC,MAAM,CAACC,QAAP,CAAgBC,IAFlB,CAGPC,MAAM,CAAElB,CAAG,CAACmB,OAHL,CAIPb,KAAK,CAAEF,CAAQ,CAACE,KAJT,CAKPR,KAAK,CAAEM,CALA,CAHG,CADqB,CAY/BF,CAZ+B,EAajCH,CAAO,CAAEO,CAAF,CAb0B,4BAAfc,CAAe,sBAAfA,CAAe,iBAgBnC,iBAAOtB,CAAK,CAACW,MAAb,qBAAO,gBAAAX,CAAK,QAAL,CAAkBsB,CAAlB,EACR,CAED,CAAOhB,CACR,CAtCM"}