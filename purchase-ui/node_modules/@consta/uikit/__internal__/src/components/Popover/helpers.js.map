{"version":3,"file":"helpers.js","names":["getPosition","x","y","Math","round","getPositionsByDirection","contentSize","anchorSize","position","arrowOffset","offset","contentWidth","width","contentHeight","height","anchorWidth","anchorHeight","anchorCenter","xForRightDirections","xForLeftDirections","xForVerticalDirections","right","center","left","yForDownDirections","yForUpDirections","yForHorizontalDirections","up","down","xForStartLeftDirections","xForStartRightDirections","yForStartUpDirections","yForStartDownDirections","upLeft","upCenter","upRight","downLeft","downCenter","downRight","rightUp","rightCenter","rightDown","leftUp","leftCenter","leftDown","downStartLeft","downStartRight","upStartLeft","upStartRight","leftStartUp","leftStartDown","rightStartUp","rightStartDown","getComputedPositionAndDirection","initialPosition","viewportSize","initialDirection","direction","possibleDirections","bannedDirections","spareDirection","positionsByDirection","filter","dir","includes","find","pos","isFittingDown","isFittingUp","isFittingLeft","isFittingRight"],"sources":["../../../../../src/components/Popover/helpers.ts"],"sourcesContent":["import { Direction, Position } from './Popover';\n\ntype Size = Pick<DOMRect, 'width' | 'height'>;\n\ntype PositionsByDirection = Record<Direction, NonNullable<Position>>;\n\nconst getPosition = (x: number, y: number): NonNullable<Position> => ({\n  x: Math.round(x),\n  y: Math.round(y),\n});\n\nexport const getPositionsByDirection = ({\n  contentSize,\n  anchorSize,\n  position: { x, y },\n  arrowOffset = 0,\n  offset = 0,\n}: {\n  contentSize: Size;\n  anchorSize: Size;\n  position: NonNullable<Position>;\n  arrowOffset?: number;\n  offset?: number;\n}): PositionsByDirection => {\n  const { width: contentWidth, height: contentHeight } = contentSize;\n  const { width: anchorWidth, height: anchorHeight } = anchorSize;\n  const anchorCenter = {\n    x: x + anchorWidth / 2,\n    y: y + anchorHeight / 2,\n  };\n\n  const xForRightDirections = x + anchorWidth + offset;\n  const xForLeftDirections = x - contentWidth - offset;\n  const xForVerticalDirections = {\n    right: anchorCenter.x - arrowOffset,\n    center: anchorCenter.x - contentWidth / 2,\n    left: anchorCenter.x - contentWidth + arrowOffset,\n  };\n\n  const yForDownDirections = y + anchorHeight + offset;\n  const yForUpDirections = y - contentHeight - offset;\n  const yForHorizontalDirections = {\n    up: anchorCenter.y - contentHeight + arrowOffset,\n    center: anchorCenter.y - contentHeight / 2,\n    down: anchorCenter.y - arrowOffset,\n  };\n\n  const xForStartLeftDirections = x;\n  const xForStartRightDirections = x - contentWidth + anchorWidth;\n\n  const yForStartUpDirections = y;\n  const yForStartDownDirections = y - contentHeight + anchorHeight;\n\n  return {\n    upLeft: getPosition(xForVerticalDirections.left, yForUpDirections),\n    upCenter: getPosition(xForVerticalDirections.center, yForUpDirections),\n    upRight: getPosition(xForVerticalDirections.right, yForUpDirections),\n\n    downLeft: getPosition(xForVerticalDirections.left, yForDownDirections),\n    downCenter: getPosition(xForVerticalDirections.center, yForDownDirections),\n    downRight: getPosition(xForVerticalDirections.right, yForDownDirections),\n\n    rightUp: getPosition(xForRightDirections, yForHorizontalDirections.up),\n    rightCenter: getPosition(\n      xForRightDirections,\n      yForHorizontalDirections.center,\n    ),\n    rightDown: getPosition(xForRightDirections, yForHorizontalDirections.down),\n\n    leftUp: getPosition(xForLeftDirections, yForHorizontalDirections.up),\n    leftCenter: getPosition(\n      xForLeftDirections,\n      yForHorizontalDirections.center,\n    ),\n    leftDown: getPosition(xForLeftDirections, yForHorizontalDirections.down),\n\n    downStartLeft: getPosition(xForStartLeftDirections, yForDownDirections),\n    downStartRight: getPosition(xForStartRightDirections, yForDownDirections),\n\n    upStartLeft: getPosition(xForStartLeftDirections, yForUpDirections),\n    upStartRight: getPosition(xForStartRightDirections, yForUpDirections),\n\n    leftStartUp: getPosition(xForLeftDirections, yForStartUpDirections),\n    leftStartDown: getPosition(xForLeftDirections, yForStartDownDirections),\n\n    rightStartUp: getPosition(xForRightDirections, yForStartUpDirections),\n    rightStartDown: getPosition(xForRightDirections, yForStartDownDirections),\n  };\n};\n\ntype ComputedPositionAndDirectionParams = {\n  // Координата точки, к которой крепится поповер. Для якоря — координата левой верхней точки якоря\n  position: Position;\n  contentSize: Size;\n  viewportSize: Size;\n  anchorSize?: Size;\n  offset?: number;\n  arrowOffset?: number;\n  direction: Direction;\n  spareDirection: Direction;\n  possibleDirections: readonly Direction[];\n  bannedDirections: readonly Direction[];\n};\n\nexport const getComputedPositionAndDirection = ({\n  position: initialPosition,\n  contentSize,\n  viewportSize,\n  anchorSize = { width: 0, height: 0 },\n  arrowOffset,\n  direction: initialDirection,\n  possibleDirections,\n  bannedDirections,\n  spareDirection,\n  offset = 0,\n}: ComputedPositionAndDirectionParams): {\n  direction: Direction;\n  position: Position;\n} => {\n  if (!initialPosition) {\n    return { position: initialPosition, direction: initialDirection };\n  }\n\n  const positionsByDirection = getPositionsByDirection({\n    contentSize,\n    anchorSize,\n    position: initialPosition,\n    arrowOffset,\n    offset,\n  });\n\n  const direction =\n    [initialDirection, ...possibleDirections]\n      .filter((dir) => !bannedDirections.includes(dir))\n      .find((dir) => {\n        const pos = positionsByDirection[dir];\n        const { width, height } = contentSize;\n\n        const isFittingDown = pos.y + height <= viewportSize.height;\n        const isFittingUp = pos.y >= 0;\n\n        const isFittingLeft = pos.x >= 0;\n        const isFittingRight = pos.x + width <= viewportSize.width;\n\n        return isFittingUp && isFittingDown && isFittingLeft && isFittingRight;\n      }) || spareDirection;\n\n  return {\n    direction,\n    position: positionsByDirection[direction],\n  };\n};\n"],"mappings":"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"}