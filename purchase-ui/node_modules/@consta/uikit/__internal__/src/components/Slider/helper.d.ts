import { IconComponent } from '@consta/icons/Icon';
import React from 'react';
import { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';
import { Direction } from '../Popover';
import { ActiveButton } from './useSlider/helper';
export declare const sliderPropStatus: readonly ["alert", "warning", "success"];
export declare type SliderPropStatus = typeof sliderPropStatus[number];
export declare const sliderPropStatusDefault: "alert";
export declare type SliderPropView = 'default' | 'division';
export declare const sliderPropSize: readonly ["s", "xs", "m", "l"];
export declare type SliderPropSize = typeof sliderPropSize[number];
export declare const sliderPropSizeDefault: SliderPropSize;
export declare type SliderValue<RANGE> = RANGE extends true ? [number, number] : number;
export declare type SliderPropOnChange<RANGE> = (value: SliderValue<RANGE>, prop: {
    e?: Event | React.TouchEvent | React.MouseEvent | React.KeyboardEvent | React.ChangeEvent;
}) => void;
declare type SliderPropToolipFormatter = (value: number | undefined) => string;
declare type Side = IconComponent | 'input';
declare type Props<RANGE extends boolean = false> = {
    className?: string;
    step?: number | number[];
    view?: SliderPropView;
    disabled?: boolean;
    range?: RANGE;
    withTooltip?: boolean;
    value: SliderValue<RANGE>;
    label?: string;
    labelIcon?: IconComponent;
    caption?: string;
    status?: SliderPropStatus;
    min?: number;
    size?: SliderPropSize;
    max?: number;
    onChange?: SliderPropOnChange<RANGE>;
    onAfterChange?: SliderPropOnChange<RANGE>;
    leftSide?: Side;
    tooltipFormatter?: SliderPropToolipFormatter;
    rightSide?: Side;
    tooltipDirection?: Direction;
    tooltipPossibleDirections?: Direction[];
};
export declare type Line = {
    width: number;
    active: boolean;
    size?: number[];
};
export declare type SliderLineProps = {
    view?: SliderPropView;
    lines: Line[];
    disabled?: boolean;
    hovered?: boolean;
    onHover?: (hovered: boolean) => void;
};
export declare type SliderPointProps = PropsWithHTMLAttributes<{
    value?: number;
    disabled?: boolean;
    focused?: boolean;
    hovered?: boolean;
    withTooltip?: boolean;
    handlePress?: (typeButton: ActiveButton) => void;
    buttonLabel?: ActiveButton;
    buttonRef?: React.RefObject<HTMLButtonElement>;
    popoverPosition?: TrackPosition;
    tooltipFormatter?: SliderPropToolipFormatter;
    onFocus?: (e: React.FocusEvent<HTMLButtonElement> | React.MouseEvent, button: ActiveButton) => void;
    onKeyPress?: (e: React.KeyboardEvent, typeButton?: ActiveButton) => void;
    onHover?: (hovered: boolean) => void;
    position: number;
    active?: boolean;
    tooltipZIndex?: number;
    tooltipDirection?: Direction;
    tooltipPossibleDirections?: Direction[];
}, HTMLButtonElement>;
export declare type SliderProps<RANGE extends boolean> = PropsWithHTMLAttributes<Props<RANGE>, HTMLDivElement>;
export declare type SliderComponent = <RANGE extends boolean = false>(props: SliderProps<RANGE>) => React.ReactElement | null;
export declare const isRangeParams: (params: Props<boolean>) => params is Props<true>;
export declare const isNotRangeParams: (params: Props<boolean>) => params is Props<false>;
export declare const defaultTooltipFormatter: SliderPropToolipFormatter;
export declare type TrackPosition = {
    x: number;
    y: number;
} | null;
export declare const getValueForInput: (props: SliderProps<boolean>, field: 0 | 1) => number;
declare type GetOnChandgeForInputReturned = (props: {
    e?: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;
    value: number;
}) => void;
export declare const getOnChandgeForInput: (props: SliderProps<boolean>, field: 0 | 1) => GetOnChandgeForInputReturned;
export declare const getIcon: (side?: Side) => IconComponent<"span"> | undefined;
export declare const getMaxForStartField: (props: SliderProps<boolean>) => number | undefined;
export declare const getMinForEndField: (props: SliderProps<boolean>) => number | undefined;
export declare const getValidStep: (min: number, max: number, step?: number | number[]) => number | number[];
export {};
