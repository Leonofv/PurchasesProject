{"version":3,"file":"helper.js","names":["sliderPropStatus","sliderPropStatusDefault","sliderPropSize","sliderPropSizeDefault","isRangeParams","params","range","isNotRangeParams","defaultTooltipFormatter","value","toString","getValueForInput","props","field","getOnChandgeForInput","e","onChange","newValue","getIcon","side","getMaxForStartField","max","getMinForEndField","min","getValidStep","step","Array","isArray","Math","abs"],"sources":["../../../../../src/components/Slider/helper.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\nimport { Direction } from '../Popover';\nimport { ActiveButton } from './useSlider/helper';\n\nexport const sliderPropStatus = ['alert', 'warning', 'success'] as const;\nexport type SliderPropStatus = typeof sliderPropStatus[number];\nexport const sliderPropStatusDefault = sliderPropStatus[0];\n\nexport type SliderPropView = 'default' | 'division';\n\nexport const sliderPropSize = ['s', 'xs', 'm', 'l'] as const;\nexport type SliderPropSize = typeof sliderPropSize[number];\nexport const sliderPropSizeDefault: SliderPropSize = sliderPropSize[0];\n\nexport type SliderValue<RANGE> = RANGE extends true ? [number, number] : number;\n\nexport type SliderPropOnChange<RANGE> = (\n  value: SliderValue<RANGE>,\n  prop: {\n    e?:\n      | Event\n      | React.TouchEvent\n      | React.MouseEvent\n      | React.KeyboardEvent\n      | React.ChangeEvent;\n  },\n) => void;\n\ntype SliderPropToolipFormatter = (value: number | undefined) => string;\n\ntype Side = IconComponent | 'input';\n\ntype Props<RANGE extends boolean = false> = {\n  className?: string;\n  step?: number | number[];\n  view?: SliderPropView;\n  disabled?: boolean;\n  range?: RANGE;\n  withTooltip?: boolean;\n  value: SliderValue<RANGE>;\n  label?: string;\n  labelIcon?: IconComponent;\n  caption?: string;\n  status?: SliderPropStatus;\n  min?: number;\n  size?: SliderPropSize;\n  max?: number;\n  onChange?: SliderPropOnChange<RANGE>;\n  onAfterChange?: SliderPropOnChange<RANGE>;\n  leftSide?: Side;\n  tooltipFormatter?: SliderPropToolipFormatter;\n  rightSide?: Side;\n  tooltipDirection?: Direction;\n  tooltipPossibleDirections?: Direction[];\n};\n\nexport type Line = {\n  width: number;\n  active: boolean;\n  size?: number[];\n};\n\nexport type SliderLineProps = {\n  view?: SliderPropView;\n  lines: Line[];\n  disabled?: boolean;\n  hovered?: boolean;\n  onHover?: (hovered: boolean) => void;\n};\n\nexport type SliderPointProps = PropsWithHTMLAttributes<\n  {\n    value?: number;\n    disabled?: boolean;\n    focused?: boolean;\n    hovered?: boolean;\n    withTooltip?: boolean;\n    handlePress?: (typeButton: ActiveButton) => void;\n    buttonLabel?: ActiveButton;\n    buttonRef?: React.RefObject<HTMLButtonElement>;\n    popoverPosition?: TrackPosition;\n    tooltipFormatter?: SliderPropToolipFormatter;\n    onFocus?: (\n      e: React.FocusEvent<HTMLButtonElement> | React.MouseEvent,\n      button: ActiveButton,\n    ) => void;\n    onKeyPress?: (e: React.KeyboardEvent, typeButton?: ActiveButton) => void;\n    onHover?: (hovered: boolean) => void;\n    position: number;\n    active?: boolean;\n    tooltipZIndex?: number;\n    tooltipDirection?: Direction;\n    tooltipPossibleDirections?: Direction[];\n  },\n  HTMLButtonElement\n>;\n\nexport type SliderProps<RANGE extends boolean> = PropsWithHTMLAttributes<\n  Props<RANGE>,\n  HTMLDivElement\n>;\n\nexport type SliderComponent = <RANGE extends boolean = false>(\n  props: SliderProps<RANGE>,\n) => React.ReactElement | null;\n\nexport const isRangeParams = (\n  params: Props<boolean>,\n): params is Props<true> => {\n  return !!params.range;\n};\n\nexport const isNotRangeParams = (\n  params: Props<boolean>,\n): params is Props<false> => {\n  return !params.range;\n};\n\nexport const defaultTooltipFormatter: SliderPropToolipFormatter = (value) =>\n  value?.toString() || '';\n\nexport type TrackPosition = {\n  x: number;\n  y: number;\n} | null;\n\nexport const getValueForInput = (\n  props: SliderProps<boolean>,\n  field: 0 | 1,\n): number => {\n  if (isRangeParams(props)) {\n    return props.value[field];\n  }\n  return props.value as number;\n};\n\ntype GetOnChandgeForInputReturned = (props: {\n  e?: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n  value: number;\n}) => void;\n\nexport const getOnChandgeForInput =\n  (props: SliderProps<boolean>, field: 0 | 1): GetOnChandgeForInputReturned =>\n  ({ e, value }) => {\n    if (!props.onChange) {\n      return;\n    }\n    if (isNotRangeParams(props)) {\n      props.onChange(value, { e });\n    }\n    if (isRangeParams(props)) {\n      const newValue: SliderValue<true> = field\n        ? [props.value[0], value]\n        : [value, props.value[1]];\n      props.onChange(newValue, {\n        e,\n      });\n    }\n  };\n\nexport const getIcon = (side?: Side) => {\n  if (side !== 'input') {\n    return side;\n  }\n};\n\nexport const getMaxForStartField = (props: SliderProps<boolean>) => {\n  if (isNotRangeParams(props)) {\n    return props.max;\n  }\n  if (isRangeParams(props)) {\n    return props.value[1];\n  }\n};\n\nexport const getMinForEndField = (props: SliderProps<boolean>) => {\n  if (isNotRangeParams(props)) {\n    return props.min;\n  }\n  if (isRangeParams(props)) {\n    return props.value[0];\n  }\n};\n\nexport const getValidStep = (\n  min: number,\n  max: number,\n  step?: number | number[],\n) => {\n  if (step) {\n    if (Array.isArray(step)) {\n      return step;\n    }\n    if (step <= 0) {\n      return 1;\n    }\n    return step;\n  }\n  return Math.abs((max - min) / 100);\n};\n"],"mappings":"AAOA,MAAO,IAAMA,iBAAgB,CAAG,CAAC,OAAD,CAAU,SAAV,CAAqB,SAArB,CAAzB,CAEP,MAAO,IAAMC,wBAAuB,CAAGD,gBAAgB,CAAC,CAAD,CAAhD,CAIP,MAAO,IAAME,eAAc,CAAG,CAAC,GAAD,CAAM,IAAN,CAAY,GAAZ,CAAiB,GAAjB,CAAvB,CAEP,MAAO,IAAMC,sBAAqC,CAAGD,cAAc,CAAC,CAAD,CAA5D,CA8FP,MAAO,IAAME,cAAa,CAAG,SAC3BC,CAD2B,CAED,CAC1B,MAAO,CAAC,CAACA,CAAM,CAACC,KACjB,CAJM,CAMP,MAAO,IAAMC,iBAAgB,CAAG,SAC9BF,CAD8B,CAEH,CAC3B,MAAO,CAACA,CAAM,CAACC,KAChB,CAJM,CAMP,MAAO,IAAME,wBAAkD,CAAG,SAACC,CAAD,QAChE,QAAAA,CAAK,WAALA,CAAA,QAAAA,CAAK,CAAEC,QAAP,KAAqB,EAD2C,CAA3D,CAQP,MAAO,IAAMC,iBAAgB,CAAG,SAC9BC,CAD8B,CAE9BC,CAF8B,CAGnB,OACPT,cAAa,CAACQ,CAAD,CADN,CAEFA,CAAK,CAACH,KAAN,CAAYI,CAAZ,CAFE,CAIJD,CAAK,CAACH,KACd,CARM,CAeP,MAAO,IAAMK,qBAAoB,CAC/B,SAACF,CAAD,CAA8BC,CAA9B,QACA,YAAkB,IAAfE,EAAe,GAAfA,CAAe,CAAZN,CAAY,GAAZA,KAAY,CAChB,GAAKG,CAAK,CAACI,QAAX,GAGIT,gBAAgB,CAACK,CAAD,CAHpB,EAIEA,CAAK,CAACI,QAAN,CAAeP,CAAf,CAAsB,CAAEM,CAAC,CAADA,CAAF,CAAtB,CAJF,CAMIX,aAAa,CAACQ,CAAD,CANjB,EAM0B,CACxB,GAAMK,EAA2B,CAAGJ,CAAK,CACrC,CAACD,CAAK,CAACH,KAAN,CAAY,CAAZ,CAAD,CAAiBA,CAAjB,CADqC,CAErC,CAACA,CAAD,CAAQG,CAAK,CAACH,KAAN,CAAY,CAAZ,CAAR,CAFJ,CAGAG,CAAK,CAACI,QAAN,CAAeC,CAAf,CAAyB,CACvBF,CAAC,CAADA,CADuB,CAAzB,CAGD,CACF,CAhBD,CADK,CAmBP,MAAO,IAAMG,QAAO,CAAG,SAACC,CAAD,CAAiB,CACtC,GAAa,OAAT,GAAAA,CAAJ,CACE,MAAOA,EAEV,CAJM,CAMP,MAAO,IAAMC,oBAAmB,CAAG,SAACR,CAAD,CAAiC,OAC9DL,iBAAgB,CAACK,CAAD,CAD8C,CAEzDA,CAAK,CAACS,GAFmD,CAI9DjB,aAAa,CAACQ,CAAD,CAJiD,CAKzDA,CAAK,CAACH,KAAN,CAAY,CAAZ,CALyD,OAOnE,CAPM,CASP,MAAO,IAAMa,kBAAiB,CAAG,SAACV,CAAD,CAAiC,OAC5DL,iBAAgB,CAACK,CAAD,CAD4C,CAEvDA,CAAK,CAACW,GAFiD,CAI5DnB,aAAa,CAACQ,CAAD,CAJ+C,CAKvDA,CAAK,CAACH,KAAN,CAAY,CAAZ,CALuD,OAOjE,CAPM,CASP,MAAO,IAAMe,aAAY,CAAG,SAC1BD,CAD0B,CAE1BF,CAF0B,CAG1BI,CAH0B,CAIvB,OACCA,EADD,CAEGC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAFH,CAGQA,CAHR,CAKW,CAAR,EAAAA,CALH,CAMQ,CANR,CAQMA,CARN,CAUIG,IAAI,CAACC,GAAL,CAAS,CAACR,CAAG,CAAGE,CAAP,EAAc,GAAvB,CACR,CAfM"}