/// <reference types="react" />
import { IconComponent } from '@consta/icons/Icon';
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare type SnackBarItemDefault = {
    key: string | number;
    message?: React.ReactNode;
    status?: SnackBarItemStatus;
    autoClose?: boolean | number;
    showProgress?: SnackBarItemShowProgressProp;
    icon?: IconComponent;
    actions?: SnackBarPropItemAction[];
    onClose?: (item: SnackBarItemDefault) => void;
    onAutoClose?: (item: SnackBarItemDefault) => void;
};
/**
 * @deprecated since version 3.16.0 use SnackBarItemDefault
 */
export declare type Item = SnackBarItemDefault;
export declare type SnackBarPropItemAction = {
    label: string | number;
    onClick: React.EventHandler<React.MouseEvent>;
};
export declare type SnackBarActionButtonProps = {
    actions: SnackBarPropItemAction[];
    className?: string;
};
export declare type SnackBarItemProps = PropsWithHTMLAttributesAndRef<Omit<SnackBarItemDefault, 'onClose' | 'onAutoClose'> & {
    onClose?: () => void;
    form?: SnackBarPropForm;
    onAutoClose?: () => void;
}, HTMLDivElement>;
export declare const snackBarItemStatus: readonly ["normal", "system", "success", "warning", "alert"];
export declare type SnackBarItemStatus = typeof snackBarItemStatus[number];
export declare const snackBarItemStatusDefault: SnackBarItemStatus;
export declare const snackBarItemShowProgressProp: readonly ["timer", "line"];
export declare type SnackBarItemShowProgressProp = typeof snackBarItemShowProgressProp[number];
export declare type SnackBarPropGetItemKey<ITEM> = (item: ITEM) => string | number;
export declare type SnackBarPropGetItemMessage<ITEM> = (item: ITEM) => React.ReactNode | undefined;
export declare type SnackBarPropGetItemStatus<ITEM> = (item: ITEM) => SnackBarItemStatus | undefined;
export declare type SnackBarPropGetItemAutoClose<ITEM> = (item: ITEM) => boolean | number | undefined;
export declare type SnackBarPropGetItemShowProgress<ITEM> = (item: ITEM) => SnackBarItemShowProgressProp | undefined;
export declare type SnackBarPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent | undefined;
export declare type SnackBarPropGetItemActions<ITEM> = (item: ITEM) => SnackBarPropItemAction[] | undefined;
export declare type SnackBarPropGetItemOnClose<ITEM> = (item: ITEM) => ((item: ITEM) => void) | undefined;
export declare type SnackBarPropGetItemOnAutoClose<ITEM> = (item: ITEM) => ((item: ITEM) => void) | undefined;
export declare type Mappers<ITEM> = {
    getItemKey?: SnackBarPropGetItemKey<ITEM>;
    getItemMessage?: SnackBarPropGetItemMessage<ITEM>;
    getItemStatus?: SnackBarPropGetItemStatus<ITEM>;
    getItemAutoClose?: SnackBarPropGetItemAutoClose<ITEM>;
    getItemShowProgress?: SnackBarPropGetItemShowProgress<ITEM>;
    getItemIcon?: SnackBarPropGetItemIcon<ITEM>;
    getItemActions?: SnackBarPropGetItemActions<ITEM>;
    getItemOnClose?: SnackBarPropGetItemOnClose<ITEM>;
    getItemOnAutoClose?: SnackBarPropGetItemOnAutoClose<ITEM>;
};
export declare const snackBarPropForm: readonly ["default", "round", "brick"];
export declare type SnackBarPropForm = typeof snackBarPropForm[number];
export declare const snackBarPropFormDefault: "default";
export declare type SnackBarProps<ITEM = SnackBarItemDefault> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    children?: never;
    form?: SnackBarPropForm;
    onItemClose?: (item: ITEM) => void;
    onItemAutoClose?: (item: ITEM) => void;
} & Mappers<ITEM>, HTMLDivElement> & (ITEM extends {
    key: SnackBarItemDefault['key'];
} ? {} : {
    getItemKey: SnackBarPropGetItemKey<ITEM>;
});
export declare type SnackBarComponent = <ITEM = SnackBarItemDefault>(props: SnackBarProps<ITEM>) => React.ReactElement | null;
export declare type SnackBarTimerPropOnMount = (object: {
    pause: () => void;
    start: () => void;
}) => void;
export declare type SnackBarTimerProps = {
    onMount: SnackBarTimerPropOnMount;
    onTimeIsOver: () => void;
    startTime: number;
    hidden?: boolean;
    className?: string;
};
export declare type SnackBarItemComponent = (props: SnackBarItemProps) => React.ReactElement | null;
