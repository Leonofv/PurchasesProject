/// <reference types="react" />
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare const stepsSizes: readonly ["m", "s", "l"];
export declare type StepsPropSize = typeof stepsSizes[number];
export declare const stepsDefaultSize: StepsPropSize;
export declare type StepsPropOnChange<ITEM> = (value: ITEM, props: {
    e: React.MouseEvent;
}) => void;
export declare type StepsPropGetLabel<ITEM> = (item: ITEM) => string;
export declare type StepsPropGetDisabled<ITEM> = (item: ITEM) => boolean | undefined;
export declare type StepsPropGetSkipped<ITEM> = (item: ITEM) => boolean | undefined;
export declare type StepsPropGetCompleted<ITEM> = (item: ITEM) => boolean | undefined;
export declare type StepsItemDefault = {
    label: string;
    disabled?: boolean;
    skipped?: boolean;
    completed?: boolean;
};
export declare type StepsProps<ITEM = StepsItemDefault> = PropsWithHTMLAttributesAndRef<{
    size?: StepsPropSize;
    items: ITEM[];
    value: ITEM;
    getItemLabel?: StepsPropGetLabel<ITEM>;
    getItemDisabled?: StepsPropGetDisabled<ITEM>;
    getItemCompleted?: StepsPropGetCompleted<ITEM>;
    getItemSkipped?: StepsPropGetSkipped<ITEM>;
    onChange: StepsPropOnChange<ITEM>;
    className?: string;
}, HTMLDivElement> & (ITEM extends {
    label: StepsItemDefault['label'];
} ? {} : {
    getItemLabel: StepsPropGetLabel<ITEM>;
});
export declare type StepsCompnent = <ITEM>(props: StepsProps<ITEM>) => React.ReactElement | null;
