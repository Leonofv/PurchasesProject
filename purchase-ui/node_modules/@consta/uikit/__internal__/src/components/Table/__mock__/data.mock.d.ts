import React from 'react';
import { TableFilters as Filters, TableProps } from '../Table';
export declare const rangeFilterer: (value: number | string, filterValue: {
    min: number | string;
    max: number | string;
}) => boolean;
export declare const rows: {
    id: string;
    field: string;
    year: number;
    type: string;
    estimatedReserves: number;
    remainingReserves: number;
    production: number;
    total: number;
}[];
export declare const filters: Filters<typeof rows[number]>;
export declare const customFilters: Filters<typeof rows[number]>;
export declare const tableData: TableProps<typeof rows[number]>;
declare const rowsForMultiLevelHeadersData: {
    id: string;
    weightG: string;
    weightKg: string;
    year: number;
    distribution: string;
    dispatch: string;
    arrival: string;
    responsible1: string;
    responsible2: string;
}[];
export declare const tableWithExpandableRowsData: {
    rows: ({
        id: string;
        field: string;
        year: number;
        type: string;
        estimatedReserves: number;
        remainingReserves: number;
        production: number;
        total: number;
        rows?: undefined;
    } | {
        id: string;
        field: string;
        year: number;
        type: string;
        estimatedReserves: number;
        remainingReserves: number;
        production: number;
        total: number;
        rows: ({
            id: string;
            field: string;
            year: number;
            type: string;
            estimatedReserves: number;
            remainingReserves: number;
            production: number;
            total: number;
            rows?: undefined;
        } | {
            id: string;
            field: string;
            year: number;
            type: string;
            estimatedReserves: number;
            remainingReserves: number;
            production: number;
            total: number;
            rows: ({
                id: string;
                field: string;
                year: number;
                type: string;
                estimatedReserves: number;
                remainingReserves: number;
                production: number;
                total: number;
                rows: {
                    id: string;
                    field: string;
                    year: number;
                    type: string;
                    estimatedReserves: number;
                    remainingReserves: number;
                    production: number;
                    total: number;
                }[];
            } | {
                id: string;
                field: string;
                year: number;
                type: string;
                estimatedReserves: number;
                remainingReserves: number;
                production: number;
                total: number;
                rows?: undefined;
            })[];
        })[];
    })[];
    borderBetweenRows: boolean;
};
export declare const tableWithMultiLevelHeadersData: TableProps<typeof rowsForMultiLevelHeadersData[number]>;
declare const tableWithTrafficLightDataRows: {
    id: string;
    field: string;
    sum: number;
    status: JSX.Element;
    statusOrder: number;
}[];
export declare const tableWithBagdeData: TableProps<typeof tableWithTrafficLightDataRows[number]>;
export declare const COLUMNS: ({
    title: string;
    columns: ({
        title: string;
        columns: {
            title: string;
            accessor: string;
            align: string;
        }[];
        accessor?: undefined;
        align?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        columns?: undefined;
    })[];
    accessor?: undefined;
    align?: undefined;
} | {
    title: string;
    accessor: string;
    align: string;
    columns?: undefined;
} | {
    title: string;
    columns: ({
        title: string;
        accessor: string;
        align: string;
        sortable?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        sortable: boolean;
    })[];
    accessor?: undefined;
    align?: undefined;
})[];
export declare const TRANSFORMED_COLUMNS: (({
    title: string;
    columns: ({
        title: string;
        columns: {
            title: string;
            accessor: string;
            align: string;
        }[];
        accessor?: undefined;
        align?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        columns?: undefined;
    })[];
    colId: number;
    position: {
        colSpan: number;
        topHeaderGridIndex: number;
        gridIndex: number;
        level: number;
        rowSpan?: undefined;
    };
    accessor?: undefined;
    align?: undefined;
} | {
    title: string;
    accessor: string;
    align: string;
    colId: number;
    position: {
        topHeaderGridIndex: number;
        gridIndex: number;
        rowSpan: number;
        level: number;
        colSpan?: undefined;
    };
    columns?: undefined;
} | {
    title: string;
    colId: number;
    columns: ({
        title: string;
        accessor: string;
        align: string;
        sortable?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        sortable: boolean;
    })[];
    position: {
        colSpan: number;
        topHeaderGridIndex: number;
        gridIndex: number;
        level: number;
        rowSpan?: undefined;
    };
    accessor?: undefined;
    align?: undefined;
})[] | ({
    title: string;
    colId: number;
    columns: {
        title: string;
        accessor: string;
        align: string;
    }[];
    parentId: number;
    position: {
        colSpan: number;
        topHeaderGridIndex: number;
        gridIndex: number;
        level: number;
        rowSpan?: undefined;
    };
    accessor?: undefined;
    align?: undefined;
    sortable?: undefined;
} | {
    title: string;
    accessor: string;
    align: string;
    colId: number;
    parentId: number;
    position: {
        topHeaderGridIndex: number;
        gridIndex: number;
        rowSpan: number;
        level: number;
        colSpan?: undefined;
    };
    columns?: undefined;
    sortable?: undefined;
} | {
    title: string;
    accessor: string;
    align: string;
    sortable: boolean;
    colId: number;
    parentId: number;
    position: {
        topHeaderGridIndex: number;
        gridIndex: number;
        rowSpan: number;
        level: number;
        colSpan?: undefined;
    };
    columns?: undefined;
})[])[];
export declare const generateData: (rowsCount: number, columnsCount: number) => {
    rows: {
        [key: string]: string;
        id: string;
    }[];
    columns: {
        title: string;
        accessor: string;
    }[];
};
export declare const tableWithMergedCellsData: {
    columns: ({
        title: string;
        accessor: string;
        align: string;
        mergeCells?: undefined;
        sortable?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        mergeCells: boolean;
        sortable?: undefined;
    } | {
        title: string;
        accessor: string;
        align: string;
        sortable: boolean;
        mergeCells: boolean;
    })[];
    rows: {
        id: string;
        weightG: string;
        weightKg: string;
        year: number;
        distribution: string;
        dispatch: string;
        arrival: string;
        responsible1: string;
        responsible2: string;
    }[];
};
declare const rowsWithObjectFields: {
    id: string;
    field: string;
    year: {
        value: number;
    };
    type: string;
    estimatedReserves: number;
    remainingReserves: number;
    production: number;
    total: number;
}[];
export declare const tableDataWithRenderFn: TableProps<typeof rowsWithObjectFields[number]>;
export declare const tableDataWithAdditionalClassName: TableProps<typeof rowsWithObjectFields[number]>;
declare const CustomIDs: {
    fullName: string;
    yearOfRegistration: string;
};
export { CustomIDs };
export declare const rowsForCustomTagLabelFunction: {
    [x: string]: string | number;
    id: string;
    phone: number;
}[];
export declare const partOfTableDataForCustomTagLabelFunction: {
    columns: {
        title: string;
        accessor: string;
        sortable: boolean;
    }[];
    rows: {
        [x: string]: string | number;
        id: string;
        phone: number;
    }[];
    filters: ({
        id: string;
        name: string;
        field: string;
        filterer: (value: any, filterValue?: unknown) => boolean;
        component: {
            name: React.FC<{
                onConfirm: (value: unknown) => void;
                onCancel: () => void;
                filterValue?: unknown;
            } & Record<string, unknown> & {
                items?: {
                    name: string;
                    value: string;
                }[] | undefined;
                withSearch?: boolean | undefined;
                title?: string | undefined;
                emptySearchText?: string | undefined;
            }>;
            props: {
                withSearch: boolean;
                items: {
                    name: string | number;
                    value: string | number;
                }[];
            };
        };
    } | {
        id: string;
        name: string;
        field: string;
        filterer: (value: number | string, filterValue: {
            min: number | string;
            max: number | string;
        }) => boolean;
        component: {
            name: React.FC<{
                onConfirm: (value: unknown) => void;
                onCancel: () => void;
                filterValue?: unknown;
            } & Record<string, unknown> & {
                title?: string | undefined;
            }>;
            props?: undefined;
        };
    })[];
};
export declare const withControlTableMock: TableProps<typeof rowsForCustomTagLabelFunction[number]>;
export declare const withHiddenColumnTableMock: TableProps<typeof rowsForCustomTagLabelFunction[number]>;
declare const rowsWithColSpan: {
    id: string;
    name: string;
    street: undefined;
    building: undefined;
    age: undefined;
    number: undefined;
    gender: undefined;
    rows: {
        id: string;
        name: string;
        street: string;
        building: number;
        age: number;
        number: number;
        gender: string;
    }[];
}[];
export declare const withColSpan: TableProps<typeof rowsWithColSpan[number]>;
