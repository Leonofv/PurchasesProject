{"version":3,"file":"filtering.js","names":["React","isDefined","getOptionsForFilters","filters","field","filter","filterField","map","id","name","value","label","getSelectedFiltersInitialState","reduce","fieldAcc","fieldCur","selected","fieldFiltersPresent","tableFilters","some","isSelectedFiltersPresent","selectedFilters","Object","values","filterGroup","length","getSelectedFiltersList","columns","acc","cur","currentFieldFilters","accessor","orderedFilters","option","find","filterId","filterTableData","data","mutableFilteredData","row","copiedRow","rows","columnNames","keys","rowIsValid","columnName","columnFilters","cellIsValid","cellContent","filterer","push","useSelectedFilters","onFiltersUpdated","useState","setSelectedFilters","updateSelectedFilters","tooltipSelectedFilters","newSelectedFilters","removeOneSelectedFilter","availableFilters","filterToDelete","f","removeAllSelectedFilters","initialSelectedFilters"],"sources":["../../../../../src/components/Table/filtering.ts"],"sourcesContent":["import React from 'react';\n\nimport { isDefined } from '../../utils/type-guards';\nimport { SortByProps, TableColumn, TableRow, ValueOf } from './Table';\n\nexport type FilterComponentProps = {\n  onConfirm: (value: unknown) => void;\n  onCancel: () => void;\n  filterValue?: unknown;\n} & Record<string, unknown>;\n\nexport type Filters<T extends TableRow> = ValueOf<{\n  [K in keyof T]: {\n    id: string;\n    name: string;\n    field: K extends string ? K : never;\n    filterer(value: any, filterValue?: unknown): boolean;\n  } & (\n    | { component?: never }\n    | {\n        component: {\n          name: React.FC<FilterComponentProps>;\n          props?: Omit<FilterComponentProps, 'onConfirm' | 'filterValue'>;\n        };\n      }\n  );\n}>[];\n\nexport type onSortBy<T extends TableRow> = (\n  props: SortByProps<T> | null,\n) => void;\n\nexport type FieldSelectedValues = string[];\n\ntype SelectedFilter = {\n  selected: FieldSelectedValues;\n  value?: any;\n};\n\nexport type SelectedFilters = { [field: string]: SelectedFilter };\n\ntype SelectedFiltersList = Array<{\n  id: string;\n  name: string;\n}>;\n\nexport const getOptionsForFilters = <T extends TableRow>(\n  filters: Filters<T>,\n  field: string,\n): { value: string; label: string }[] => {\n  return filters\n    .filter(({ field: filterField }) => filterField === field)\n    .map(({ id, name }) => ({ value: id, label: name }));\n};\n\nexport const getSelectedFiltersInitialState = <T extends TableRow>(\n  filters?: Filters<T>,\n): SelectedFilters => {\n  if (!filters) {\n    return {};\n  }\n\n  return filters.reduce<SelectedFilters>((fieldAcc, fieldCur) => {\n    if (!fieldAcc[fieldCur.field]) {\n      return {\n        ...fieldAcc,\n        [fieldCur.field]: {\n          selected: [],\n        },\n      };\n    }\n\n    return fieldAcc;\n  }, {});\n};\n\nexport const fieldFiltersPresent = <T extends TableRow>(\n  tableFilters: Filters<T>,\n  field: string,\n): boolean => {\n  return tableFilters.some(({ field: filterField }) => filterField === field);\n};\n\nexport const isSelectedFiltersPresent = (\n  selectedFilters: SelectedFilters,\n): boolean => {\n  return Object.values(selectedFilters).some(\n    (filterGroup) => filterGroup?.selected!.length > 0,\n  );\n};\n\nexport const getSelectedFiltersList = <T extends TableRow>({\n  filters,\n  selectedFilters,\n  columns,\n}: {\n  filters: Filters<T>;\n  selectedFilters: SelectedFilters;\n  columns: Array<TableColumn<T>>;\n}): SelectedFiltersList => {\n  return columns.reduce<SelectedFiltersList>((acc, cur) => {\n    const currentFieldFilters = selectedFilters[cur.accessor!] || [];\n    let orderedFilters: SelectedFiltersList = [];\n\n    if (\n      currentFieldFilters.selected &&\n      currentFieldFilters.selected.length > 0\n    ) {\n      orderedFilters = currentFieldFilters\n        .selected!.map((filter) => {\n          const option = filters.find(\n            ({ id: filterId }) => filterId === filter,\n          );\n\n          return option\n            ? {\n                id: option.id,\n                name: option.name,\n                value: currentFieldFilters.value,\n              }\n            : undefined;\n        })\n        .filter(isDefined);\n    }\n\n    return orderedFilters.length > 0 ? [...acc, ...orderedFilters] : acc;\n  }, []);\n};\n\nexport const filterTableData = <T extends TableRow>({\n  data,\n  filters,\n  selectedFilters,\n}: {\n  data: T[];\n  filters: Filters<T>;\n  selectedFilters: SelectedFilters;\n}): T[] => {\n  const mutableFilteredData = [];\n\n  for (const row of data) {\n    const copiedRow = { ...row };\n\n    if (copiedRow.rows?.length) {\n      copiedRow.rows = filterTableData({\n        data: copiedRow.rows as T[],\n        filters,\n        selectedFilters,\n      });\n    }\n\n    const columnNames = Object.keys(copiedRow);\n    let rowIsValid = true;\n\n    for (const columnName of columnNames) {\n      const columnFilters = selectedFilters[columnName];\n\n      if (columnFilters && columnFilters.selected!.length) {\n        let cellIsValid = false;\n        const cellContent = copiedRow[columnName as keyof T];\n\n        if (columnFilters.value) {\n          const [filterId] = columnFilters.selected;\n          const filter = filters.find(({ id }) => id === filterId);\n\n          if (filter!.filterer(cellContent, columnFilters.value)) {\n            cellIsValid = true;\n          }\n        } else {\n          for (const filterId of columnFilters.selected!) {\n            const filter = filters.find(({ id }) => id === filterId);\n\n            if (columnFilters.value === null) {\n              cellIsValid = true;\n              break;\n            }\n\n            if (filter && filter.filterer(cellContent)) {\n              cellIsValid = true;\n              break;\n            }\n          }\n        }\n\n        if (!cellIsValid) {\n          rowIsValid = false;\n        }\n      }\n\n      if (!rowIsValid) {\n        break;\n      }\n    }\n\n    if (rowIsValid) {\n      mutableFilteredData.push(copiedRow);\n    }\n  }\n\n  return mutableFilteredData;\n};\n\n/* istanbul ignore next */\nexport const useSelectedFilters = <T extends TableRow>(\n  filters?: Filters<T>,\n  onFiltersUpdated?: (filters: SelectedFilters) => void,\n): {\n  selectedFilters: SelectedFilters;\n  updateSelectedFilters: (\n    field: string,\n    tooltipSelectedFilters: FieldSelectedValues,\n    value?: unknown,\n  ) => void;\n  removeOneSelectedFilter: (\n    availableFilters: Filters<T>,\n    filter: string,\n  ) => void;\n  removeAllSelectedFilters: (availableFilters: Filters<T>) => void;\n} => {\n  const [selectedFilters, setSelectedFilters] = React.useState<SelectedFilters>(\n    getSelectedFiltersInitialState(filters),\n  );\n\n  const updateSelectedFilters = (\n    field: string,\n    tooltipSelectedFilters: FieldSelectedValues,\n    value?: unknown,\n  ): void => {\n    const newSelectedFilters = {\n      ...selectedFilters,\n      [field]: {\n        selected: [...tooltipSelectedFilters],\n        value,\n      },\n    };\n\n    setSelectedFilters(newSelectedFilters);\n    onFiltersUpdated && onFiltersUpdated(newSelectedFilters);\n  };\n\n  const removeOneSelectedFilter = (\n    availableFilters: Filters<T>,\n    filter: string,\n  ): void => {\n    const filterToDelete = availableFilters.find(({ id }) => id === filter);\n\n    if (filterToDelete) {\n      updateSelectedFilters(\n        filterToDelete.field,\n        (selectedFilters[filterToDelete.field] || {}).selected?.filter(\n          (f) => f !== filter,\n        ),\n      );\n    }\n  };\n\n  const removeAllSelectedFilters = (availableFilters: Filters<T>): void => {\n    const initialSelectedFilters =\n      getSelectedFiltersInitialState(availableFilters);\n    setSelectedFilters(initialSelectedFilters);\n    onFiltersUpdated && onFiltersUpdated(initialSelectedFilters);\n  };\n\n  return {\n    selectedFilters,\n    updateSelectedFilters,\n    removeOneSelectedFilter,\n    removeAllSelectedFilters,\n  };\n};\n"],"mappings":"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"}