{"version":3,"file":"helpers.js","names":["React","isNotNil","isNumber","isString","Order","ASC","asc","DESC","desc","getColumnsSize","sizes","map","s","join","getColumnLeftOffset","columnIndex","resizedColumnWidths","initialColumnWidths","selectedColumns","slice","size","index","reduce","acc","column","createSortingState","by","order","sortFn","toLowerCase","getNewSorting","currentSorting","newField","getMaxLevel","columns","count","traverse","cols","level","forEach","item","getLastChildrenCount","transformColumns","maxLevel","stack","headersArr","col","length","node","topHeaderGridIndex","prevItem","gridIndex","position","colSpan","mainId","colId","handledItem","push","el","parentId","rowSpan","pop","getIsFirst","accessor","parent","find","useHeaderData","headerRowsRefs","useRef","headers","headerColumnsHeights","Object","values","current","filter","ref","getBoundingClientRect","height","flattenedHeaders","flat","hidden","array","isFirst","smallTextSize","headerRowsHeights","arr","Math","min","apply","lowHeaders","sort","a","b","resizerTopOffsets","header","headerHeight","useLazyLoadData","maxVisibleRows","scrollableEl","enabled","useState","visibleStartIndex","setVisibleStartIndex","cellsRefStart","cellsRefEnd","additionalRowsCount","floor","useEffect","elHeight","offsetHeight","outerHeight","onScrollListener","top","prevIndex","addEventListener","removeEventListener","getSlicedRows","rows","setBoundaryRef","columnIdx","rowIdx","transformRows","expandedRowIds","isTableExpanded","rowsArr","options","needGoDeeper","includes","id","getMergedArray","mainArr","mergeArr","max","resultArr","i","calulateColSpans","row","spans","counter","getAvailableSpan","span"],"sources":["../../../../../src/components/Table/helpers.ts"],"sourcesContent":["import React from 'react';\n\nimport { isNotNil, isNumber, isString } from '../../utils/type-guards';\nimport {\n  ColumnWidth,\n  SortingState,\n  TableColumn,\n  TableRow,\n  TableTreeRow,\n} from './Table';\n\nexport const Order = {\n  ASC: 'ASC',\n  asc: 'asc',\n  DESC: 'DESC',\n  desc: 'desc',\n} as const;\n\nexport type OrderType = typeof Order[keyof typeof Order];\n\nexport type Position = {\n  colSpan?: number;\n  rowSpan?: number;\n  level: number;\n  gridIndex: number;\n  isFirst?: boolean;\n  topHeaderGridIndex: number;\n  smallTextSize?: boolean;\n  height?: number;\n};\n\nexport type Header<T extends TableRow> = TableColumn<T> & {\n  position: Position;\n  colId?: number;\n  parentId?: number;\n};\n\nexport type HeaderData<T extends TableRow> = {\n  headers: Array<Header<T>>[];\n  flattenedHeaders: Array<Header<T>>;\n  lowHeaders: Array<Header<T>>;\n  headerRowsRefs: React.MutableRefObject<Record<number, HTMLDivElement | null>>;\n  headerRowsHeights: Array<number>;\n  headerColumnsHeights: Array<number>;\n  resizerTopOffsets: Array<number>;\n};\n\nexport const getColumnsSize = (sizes: ColumnWidth[]): string => {\n  return sizes.map((s) => (isNumber(s) ? `${s}px` : `auto`)).join(' ');\n};\n\nexport const getColumnLeftOffset = ({\n  columnIndex,\n  resizedColumnWidths,\n  initialColumnWidths,\n}: {\n  columnIndex: number;\n  resizedColumnWidths: Array<number | undefined>;\n  initialColumnWidths: number[];\n}): number => {\n  const selectedColumns = initialColumnWidths\n    .slice(0, columnIndex)\n    .map((size, index) => resizedColumnWidths[index] || size);\n\n  return selectedColumns.reduce((acc, column) => acc + column, 0);\n};\n\nexport const createSortingState = <T extends TableRow>(\n  by: keyof T,\n  order?: OrderType,\n  sortFn?: (a: T[keyof T], b: T[keyof T]) => number,\n): SortingState<T> => {\n  if (!isString(order)) {\n    return null;\n  }\n\n  return { by, order: order.toLowerCase(), sortFn } as SortingState<T>;\n};\n\nexport const getNewSorting = <T extends TableRow>(\n  currentSorting: SortingState<T>,\n  newField: keyof T,\n  sortFn?: (a: T[keyof T], b: T[keyof T]) => number,\n): SortingState<T> => {\n  if (!currentSorting || currentSorting.by !== newField) {\n    return {\n      by: newField,\n      order: 'asc',\n      sortFn,\n    };\n  }\n\n  if (currentSorting.order === 'asc') {\n    return {\n      by: newField,\n      order: 'desc',\n      sortFn,\n    };\n  }\n\n  return null;\n};\n\nexport const getMaxLevel = <T extends TableRow>(\n  columns: Array<TableColumn<T>>,\n) => {\n  let count = 0;\n\n  const traverse = (cols: Array<TableColumn<T>>, level = 1) => {\n    if (level > count) count = level;\n    cols.forEach((item: TableColumn<T>) => {\n      if (item.columns) {\n        traverse(item.columns, level + 1);\n      }\n    });\n  };\n\n  traverse(columns);\n\n  return count;\n};\n\nconst getLastChildrenCount = <T extends TableRow>(\n  columns: Array<TableColumn<T>>,\n) => {\n  let count = 0;\n\n  const traverse = (cols: Array<TableColumn<T>>) => {\n    cols.forEach((item: TableColumn<T>) => {\n      if (item.columns) {\n        traverse(item.columns);\n      } else {\n        count++;\n      }\n    });\n  };\n\n  traverse(columns);\n\n  return count;\n};\n\nexport const transformColumns = <T extends TableRow>(\n  columns: Array<TableColumn<T>>,\n  maxLevel: number,\n): Array<Header<T>>[] => {\n  const stack = [{ columns, index: 0 }];\n  const headersArr: Array<Header<T>>[] = [];\n  let col = 0;\n\n  while (stack.length) {\n    const level = stack.length - 1;\n    const node = stack[level];\n    const item = node.columns[node.index] as Header<T>;\n\n    if (item) {\n      if (!headersArr[level]) headersArr[level] = [];\n      const topHeaderGridIndex = stack[0].index;\n      const prevItem = headersArr[level][headersArr[level].length - 1];\n      const gridIndex = prevItem\n        ? prevItem.position.gridIndex + (prevItem.position.colSpan || 1)\n        : 0;\n      const mainId = level === 0 ? col++ : item.colId ?? 0;\n\n      const handledItem: TableColumn<T> & {\n        position: Position;\n        colId?: number;\n        parentId?: number;\n      } = {\n        ...item,\n        position: {\n          topHeaderGridIndex,\n          gridIndex,\n          level,\n        },\n      };\n\n      if (level === 0) {\n        handledItem.colId = mainId;\n      }\n\n      if (!handledItem.columns) {\n        handledItem.position.rowSpan = maxLevel - level;\n        headersArr[level].push(handledItem);\n        node.index++;\n      } else {\n        handledItem.position.colSpan = getLastChildrenCount(\n          handledItem.columns,\n        );\n        headersArr[level].push(handledItem);\n        stack.push({\n          columns: handledItem.columns.map((el) => ({\n            ...el,\n            colId: col++,\n            parentId: mainId,\n          })),\n          index: 0,\n        });\n      }\n    } else {\n      stack.pop();\n      if (stack[stack.length - 1]) stack[stack.length - 1].index++;\n    }\n  }\n\n  return headersArr;\n};\n\nconst getIsFirst = <T extends TableRow>(\n  columns: Header<T>[],\n  column: Header<T>,\n): boolean => {\n  const { colId, parentId, position, accessor } = column;\n  if (position.level === 0) {\n    return colId === 0;\n  }\n  const parent = columns.find((el) => el.colId === parentId);\n  return !!(\n    parent?.columns?.[0]?.accessor === accessor &&\n    (parent ? getIsFirst(columns, parent) : false)\n  );\n};\n\n/**\n * Возвращает данные, необходимые для построения хидера таблицы\n *\n * @param columns - массив колонок\n *\n * @return {\n *   {Array<Header<T>>[]} headers: двумерный массив заголовков, выстроенный по вертикали;\n *   {Array<Header<T>>} flattenedHeaders: плоский массив заголовков;\n *   {Array<Header<T>>} lowHeaders: самые нижние заголовки (по ним строятся колонки);\n *   {Record<number, HTMLDivElement | null>} headerRowsRefs: содержит рефы на заголовки;\n *   {Array<number>} headerRowsHeights: массив высот строк заголовков;\n *   {Array<number>} headerColumnsHeights: массив высот колонок заголовков;\n *   {Array<number>} resizerTopOffsets: массив отступов для компонентов Resizer;\n * }\n */\nexport const useHeaderData = <T extends TableRow>(\n  columns: Array<TableColumn<T>>,\n): HeaderData<T> => {\n  const headerRowsRefs = React.useRef<Record<number, HTMLDivElement | null>>(\n    {},\n  );\n  const headers = transformColumns(columns, getMaxLevel(columns));\n  const headerColumnsHeights: Array<number> = Object.values(\n    headerRowsRefs.current,\n  )\n    .filter(isNotNil)\n    .map((ref) => ref.getBoundingClientRect().height);\n\n  const flattenedHeaders = headers\n    .flat()\n    .filter((column: TableColumn<T>) => !column.hidden)\n    .map((column, index, array) => ({\n      ...column,\n      position: {\n        ...column.position,\n        isFirst: getIsFirst(array, column),\n        smallTextSize:\n          headers.length > 1 && column.position.level === headers.length - 1,\n        height: headerColumnsHeights[index] || 0,\n      },\n    }));\n  const headerRowsHeights = headers.map((arr, index) => {\n    return Math.min.apply(\n      null,\n      flattenedHeaders\n        .filter(\n          (col: TableColumn<T> & { position: Position }) =>\n            col.position.level === index,\n        )\n        .map((item) => item.position.height),\n    );\n  });\n  const lowHeaders = flattenedHeaders\n    .filter(\n      ({ position: { colSpan } }: TableColumn<T> & { position: Position }) =>\n        !colSpan,\n    )\n    .sort((a, b) => {\n      if (a.position.topHeaderGridIndex !== b.position.topHeaderGridIndex) {\n        return a.position.topHeaderGridIndex > b.position.topHeaderGridIndex\n          ? 1\n          : -1;\n      }\n      return a.position.gridIndex > b.position.gridIndex ? 1 : -1;\n    });\n\n  const resizerTopOffsets = lowHeaders.map(\n    (header: TableColumn<T> & { position: Position }, index: number) => {\n      const headerHeight = headerRowsHeights.reduce(\n        (a: number, b: number) => a + b,\n        0,\n      );\n      if (\n        (header.position.rowSpan || 0) >=\n        (lowHeaders[index + 1]?.position.rowSpan || 0)\n      ) {\n        return headerHeight - (header.position.height || 0);\n      }\n      // eslint-disable-next-line no-unsafe-optional-chaining\n      return headerHeight - lowHeaders[index + 1]?.position.height! || 0;\n    },\n  );\n\n  return {\n    headers,\n    flattenedHeaders,\n    lowHeaders,\n    headerRowsRefs,\n    headerRowsHeights,\n    headerColumnsHeights,\n    resizerTopOffsets,\n  };\n};\n\n/**\n * Возвращает 2 функции, необходимые для отображения большого количества строк в таблице\n *\n * @param maxVisibleRows - максимальное количество отображаемых строк в один момент времени\n * @param scrollableEl - элемент, на который вешается scroll listener\n * @param enabled - флаг включения данной функциональность\n *\n * @return {\n *   getSlicedRows: функция, обрезающая исходный массив данных\n *   setBoundaryRef: функция, проставляющая рефы необходимым ячейкам для вычисления границ отображения строк\n * }\n */\nexport const useLazyLoadData = (\n  maxVisibleRows: number,\n  scrollableEl: HTMLDivElement | Window | null,\n  enabled: boolean,\n) => {\n  const [visibleStartIndex, setVisibleStartIndex] = React.useState<number>(0);\n  const cellsRefStart = React.useRef<HTMLDivElement>(null);\n  const cellsRefEnd = React.useRef<HTMLDivElement>(null);\n  const additionalRowsCount = Math.floor(maxVisibleRows / 3);\n\n  React.useEffect(() => {\n    if (!enabled) return;\n    let elHeight = 0;\n    if (scrollableEl && 'offsetHeight' in scrollableEl) {\n      elHeight = scrollableEl.offsetHeight;\n    } else if (scrollableEl && 'outerHeight' in scrollableEl) {\n      elHeight = scrollableEl.outerHeight;\n    }\n    const onScrollListener = () => {\n      if (\n        cellsRefEnd.current &&\n        elHeight / 2 > cellsRefEnd.current.getBoundingClientRect().top\n      ) {\n        setVisibleStartIndex((prevIndex) => prevIndex + additionalRowsCount);\n      } else if (\n        cellsRefStart.current &&\n        cellsRefStart.current.getBoundingClientRect().top > elHeight / 2\n      ) {\n        setVisibleStartIndex((prevIndex) =>\n          prevIndex - additionalRowsCount < 0\n            ? 0\n            : prevIndex - additionalRowsCount,\n        );\n      }\n    };\n\n    scrollableEl?.addEventListener('scroll', onScrollListener);\n\n    return () => scrollableEl?.removeEventListener('scroll', onScrollListener);\n  }, [visibleStartIndex, scrollableEl]);\n\n  const setBoundaryRef = (columnIdx: number, rowIdx: number) => {\n    if (\n      enabled &&\n      columnIdx === 0 &&\n      rowIdx === additionalRowsCount &&\n      visibleStartIndex > 0\n    ) {\n      return cellsRefStart;\n    }\n    if (\n      enabled &&\n      columnIdx === 0 &&\n      rowIdx === maxVisibleRows - additionalRowsCount\n    ) {\n      return cellsRefEnd;\n    }\n    return undefined;\n  };\n\n  const getSlicedRows = <T extends TableRow>(rows: T[]) =>\n    !enabled || rows.length < maxVisibleRows\n      ? rows\n      : rows.slice(visibleStartIndex, visibleStartIndex + maxVisibleRows);\n\n  return {\n    getSlicedRows,\n    setBoundaryRef,\n  };\n};\n\nexport const transformRows = <T extends TableRow>(\n  rows: T[],\n  expandedRowIds: string[],\n  isTableExpanded?: boolean,\n): TableTreeRow<T>[] => {\n  const stack = [{ rows, index: 0 }];\n  const rowsArr: TableTreeRow<T>[] = [];\n  while (stack.length) {\n    const level = stack.length - 1;\n    const node = stack[level];\n    const item: T = node.rows[node.index];\n\n    if (item) {\n      const handledItem: TableTreeRow<T> = {\n        ...item,\n        options: { level },\n        rows: item.rows && [...item.rows],\n      };\n\n      const needGoDeeper =\n        Boolean(handledItem.rows) &&\n        (isTableExpanded || expandedRowIds.includes(handledItem.id));\n\n      if (needGoDeeper) {\n        stack.push({ rows: handledItem.rows as T[], index: 0 });\n      } else {\n        node.index++;\n      }\n\n      rowsArr.push(handledItem);\n    } else {\n      stack.pop();\n      if (stack[stack.length - 1]) {\n        stack[stack.length - 1].index++;\n      }\n    }\n  }\n  return rowsArr;\n};\n\nexport function getMergedArray<TYPE>(mainArr: TYPE[], mergeArr: TYPE[]) {\n  const length = Math.max(mainArr.length, mergeArr.length);\n  const resultArr: TYPE[] = [];\n  for (let i = 0; i < length; i++) {\n    resultArr.push(mergeArr[i] ?? mainArr[i]);\n  }\n  return resultArr;\n}\n\nexport function calulateColSpans<T extends TableRow>(\n  columns: TableColumn<T>[],\n  row: TableTreeRow<T>,\n) {\n  const spans: number[] = [];\n  let counter = 0;\n  const { length } = columns;\n  const getAvailableSpan = (span: number, size: number) => {\n    if (size + span > length) return length - size - span;\n    return span;\n  };\n  columns.forEach((column) => {\n    const { colSpan } = column;\n    const size = spans.length > 1 ? spans.reduce((a, b) => a + b) : 0;\n    if (typeof colSpan === 'number' || typeof colSpan === 'function') {\n      const span = typeof colSpan === 'number' ? colSpan : colSpan(row);\n      if (counter === 0) {\n        spans.push(getAvailableSpan(span, size));\n      } else {\n        spans.push(getAvailableSpan(span - counter || 0, size));\n      }\n      counter = span - counter > 0 ? span - 1 : counter - span;\n    } else if (counter !== 0) {\n      spans.push(0);\n      counter--;\n    } else {\n      spans.push(getAvailableSpan(1, size));\n    }\n  });\n  return spans;\n}\n"],"mappings":"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"}