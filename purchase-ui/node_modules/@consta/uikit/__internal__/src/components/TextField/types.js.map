{"version":3,"file":"types.js","names":["textFieldPropSize","textFieldPropSizeDefault","textFieldPropView","textFieldPropViewDefault","textFieldPropForm","textFieldPropFormDefault","textFieldPropStatus"],"sources":["../../../../../src/components/TextField/types.ts"],"sourcesContent":["import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { AutoCompete } from '../../utils/types/AutoComplete';\nimport { PropsWithHTMLAttributes } from '../../utils/types/PropsWithHTMLAttributes';\n\nexport type TextFieldPropValue = string | null;\nexport type TextFieldPropName = string;\nexport type TextFieldPropId = string | number;\n\nexport const textFieldPropSize = ['m', 'xs', 's', 'l'] as const;\nexport type TextFieldPropSize = typeof textFieldPropSize[number];\nexport const textFieldPropSizeDefault: TextFieldPropSize = textFieldPropSize[0];\n\nexport type TextFieldPropOnChange = (\n  value: TextFieldPropValue,\n  params: TextFieldOnChangeArguments,\n) => void;\nexport type TextFieldOnChangeArguments = {\n  e: React.ChangeEvent | React.MouseEvent | React.KeyboardEvent;\n  id?: TextFieldPropId;\n  name?: TextFieldPropName;\n};\n\nexport const textFieldPropView = ['default', 'clear'] as const;\nexport type TextFieldPropView = typeof textFieldPropView[number];\nexport const textFieldPropViewDefault: TextFieldPropView = textFieldPropView[0];\n\nexport const textFieldPropForm = [\n  'default',\n  'defaultClear',\n  'defaultBrick',\n  'brick',\n  'brickDefault',\n  'brickClear',\n  'brickRound',\n  'round',\n  'roundClear',\n  'roundBrick',\n  'clearRound',\n  'clearDefault',\n  'clearBrick',\n  'clearClear',\n] as const;\nexport type TextFieldPropForm = typeof textFieldPropForm[number];\nexport const textFieldPropFormDefault: TextFieldPropForm = textFieldPropForm[0];\n\nexport const textFieldPropStatus = ['alert', 'success', 'warning'] as const;\nexport type TextFieldPropStatus = typeof textFieldPropStatus[number];\n\nexport type TextFieldPropsTextareaType<TYPE> = TYPE extends 'textarea'\n  ?\n      | {\n          minRows?: never;\n          maxRows?: never;\n          rows?: number;\n        }\n      | {\n          rows?: never;\n          minRows?: number;\n          maxRows?: number;\n        }\n  : {\n      rows?: never;\n      minRows?: never;\n      maxRows?: never;\n    };\n\ntype InputRef<TYPE> = TYPE extends 'textarea'\n  ? { inputRef?: React.Ref<HTMLTextAreaElement> }\n  : { inputRef?: React.Ref<HTMLInputElement> };\n\nexport type TextFieldProps<TYPE extends string> = PropsWithHTMLAttributes<\n  {\n    className?: string;\n    value?: TextFieldPropValue;\n    defaultValue?: TextFieldPropValue;\n    cols?: number;\n    onChange?: TextFieldPropOnChange;\n    id?: TextFieldPropId;\n    name?: TextFieldPropName;\n    type?: TYPE;\n    disabled?: boolean;\n    maxLength?: number;\n    size?: TextFieldPropSize;\n    view?: TextFieldPropView;\n    form?: TextFieldPropForm;\n    state?: TextFieldPropStatus;\n    status?: TextFieldPropStatus;\n    onFocus?: React.FocusEventHandler<HTMLElement>;\n    onBlur?: React.FocusEventHandler<HTMLElement>;\n    incrementButtons?: boolean;\n    autoFocus?: boolean;\n    placeholder?: string;\n    leftSide?: string | IconComponent;\n    rightSide?: string | IconComponent;\n    withClearButton?: boolean;\n    autoComplete?: AutoCompete;\n    max?: number | string;\n    min?: number | string;\n    readOnly?: boolean;\n    required?: boolean;\n    step?: number | string | number[];\n    tabIndex?: number;\n    inputContainerRef?: React.Ref<HTMLDivElement>;\n    ariaLabel?: string;\n    iconSize?: IconPropSize;\n    children?: never;\n    label?: string;\n    labelIcon?: IconComponent;\n    caption?: string;\n    labelPosition?: 'top' | 'left';\n    focused?: boolean;\n    onKeyDownCapture?: React.KeyboardEventHandler;\n    onKeyPress?: React.KeyboardEventHandler;\n    onKeyPressCapture?: React.KeyboardEventHandler;\n    onKeyUp?: React.KeyboardEventHandler;\n    onKeyUpCapture?: React.KeyboardEventHandler;\n    onKeyDown?: React.KeyboardEventHandler;\n    onClear?: React.MouseEventHandler<HTMLButtonElement>;\n  },\n  HTMLDivElement\n> &\n  InputRef<TYPE> &\n  TextFieldPropsTextareaType<TYPE> &\n  React.RefAttributes<HTMLDivElement>;\n\nexport type TextFieldComponent = <TYPE extends string>(\n  props: TextFieldProps<TYPE>,\n) => React.ReactElement | null;\n"],"mappings":"AAUA,MAAO,IAAMA,kBAAiB,CAAG,CAAC,GAAD,CAAM,IAAN,CAAY,GAAZ,CAAiB,GAAjB,CAA1B,CAEP,MAAO,IAAMC,yBAA2C,CAAGD,iBAAiB,CAAC,CAAD,CAArE,CAYP,MAAO,IAAME,kBAAiB,CAAG,CAAC,SAAD,CAAY,OAAZ,CAA1B,CAEP,MAAO,IAAMC,yBAA2C,CAAGD,iBAAiB,CAAC,CAAD,CAArE,CAEP,MAAO,IAAME,kBAAiB,CAAG,CAC/B,SAD+B,CAE/B,cAF+B,CAG/B,cAH+B,CAI/B,OAJ+B,CAK/B,cAL+B,CAM/B,YAN+B,CAO/B,YAP+B,CAQ/B,OAR+B,CAS/B,YAT+B,CAU/B,YAV+B,CAW/B,YAX+B,CAY/B,cAZ+B,CAa/B,YAb+B,CAc/B,YAd+B,CAA1B,CAiBP,MAAO,IAAMC,yBAA2C,CAAGD,iBAAiB,CAAC,CAAD,CAArE,CAEP,MAAO,IAAME,oBAAmB,CAAG,CAAC,OAAD,CAAU,SAAV,CAAqB,SAArB,CAA5B"}