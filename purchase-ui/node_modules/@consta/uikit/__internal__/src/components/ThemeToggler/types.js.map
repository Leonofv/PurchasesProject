{"version":3,"file":"types.js","names":["themeTogglerPropSize","themeTogglerPropSizeDefault"],"sources":["../../../../../src/components/ThemeToggler/types.ts"],"sourcesContent":["import { IconComponent } from '@consta/icons/Icon';\n\nimport { ButtonPropView } from '##/components/Button';\nimport { Direction } from '##/components/Popover';\nimport { PropsWithHTMLAttributesAndRef } from '##/utils/types/PropsWithHTMLAttributes';\n\nexport const themeTogglerPropSize = ['m', 'l', 's', 'xs'] as const;\nexport type ThemeTogglerPropSize = typeof themeTogglerPropSize[number];\nexport const themeTogglerPropSizeDefault: ThemeTogglerPropSize =\n  themeTogglerPropSize[0];\n\nexport type ThemeTogglerPropOnChange<ITEM> = (\n  value: ITEM,\n  props: {\n    e: React.MouseEvent;\n  },\n) => void;\nexport type ThemeTogglerPropGetItemKey<ITEM> = (item: ITEM) => string | number;\nexport type ThemeTogglerPropGetItemLabel<ITEM> = (item: ITEM) => string;\nexport type ThemeTogglerPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent;\n\nexport type ThemeTogglerItemDefault = {\n  key: string;\n  label: string;\n  icon: IconComponent;\n};\n\nexport type ThemeTogglerProps<ITEM = ThemeTogglerItemDefault> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      size?: ThemeTogglerPropSize;\n      className?: string;\n      items: ITEM[];\n      value: ITEM;\n      onChange: ThemeTogglerPropOnChange<ITEM>;\n      getItemKey?: ThemeTogglerPropGetItemKey<ITEM>;\n      getItemLabel?: ThemeTogglerPropGetItemLabel<ITEM>;\n      getItemIcon?: ThemeTogglerPropGetItemIcon<ITEM>;\n      direction?: Direction;\n      possibleDirections?: readonly Direction[];\n      children?: never;\n      view?: ButtonPropView;\n    },\n    HTMLButtonElement\n  > &\n    (ITEM extends { key: ThemeTogglerItemDefault['key'] }\n      ? {}\n      : { getItemKey: ThemeTogglerPropGetItemLabel<ITEM> }) &\n    (ITEM extends { label: ThemeTogglerItemDefault['label'] }\n      ? {}\n      : { getItemLabel: ThemeTogglerPropGetItemLabel<ITEM> }) &\n    (ITEM extends { icon: ThemeTogglerItemDefault['icon'] }\n      ? {}\n      : { getItemIcon: ThemeTogglerPropGetItemIcon<ITEM> });\n\nexport type ThemeTogglerComponent = <ITEM>(\n  props: ThemeTogglerProps<ITEM>,\n) => React.ReactElement | null;\n"],"mappings":"AAMA,MAAO,IAAMA,qBAAoB,CAAG,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,IAAhB,CAA7B,CAEP,MAAO,IAAMC,4BAAiD,CAC5DD,oBAAoB,CAAC,CAAD,CADf"}