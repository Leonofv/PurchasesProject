{"version":3,"file":"useRefs.js","names":["createRef","useMemo","isNotNumber","value","useRefs","elements","deps","obj","index","length","Array","fill","map","join"],"sources":["../../../../../src/hooks/useRefs/useRefs.ts"],"sourcesContent":["import { createRef, useMemo } from 'react';\n\nconst isNotNumber = <T>(value: T): value is Exclude<T, number> =>\n  typeof value !== 'number';\n\ntype Return<\n  T,\n  E extends number | string[] | readonly string[],\n> = E extends string[]\n  ? Record<E[number], React.RefObject<T>>\n  : E extends readonly string[]\n  ? Record<E[number], React.RefObject<T>>\n  : Array<React.RefObject<T>>;\n\nexport const useRefs = <\n  T,\n  E extends number | string[] | readonly string[] = number,\n>(\n  elements: E,\n  deps: unknown[] = [],\n): Return<T, E> =>\n  useMemo(() => {\n    if (isNotNumber(elements)) {\n      const obj: Record<string, React.RefObject<T>> = {};\n      for (let index = 0; index < elements.length; index++) {\n        obj[elements[index]] = createRef<T>();\n      }\n\n      return obj as Return<T, E>;\n    }\n\n    return new Array(elements as number)\n      .fill(null)\n      .map(() => createRef<T>()) as unknown as Return<T, E>;\n  }, [typeof elements === 'number' ? elements : elements.join('-'), ...deps]);\n"],"mappings":"yEAAA,OAASA,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CAEA,GAAMC,YAAW,CAAG,SAAIC,CAAJ,QACD,QAAjB,QAAOA,EADW,CAApB,CAYA,MAAO,IAAMC,QAAO,CAAG,SAIrBC,CAJqB,KAKrBC,EALqB,wDAKH,EALG,OAOrBL,QAAO,CAAC,UAAM,CACZ,GAAIC,WAAW,CAACG,CAAD,CAAf,CAA2B,CAEzB,OADME,EAAuC,CAAG,EAChD,CAASC,CAAK,CAAG,CAAjB,CAAoBA,CAAK,CAAGH,CAAQ,CAACI,MAArC,CAA6CD,CAAK,EAAlD,CACED,CAAG,CAACF,CAAQ,CAACG,CAAD,CAAT,CAAH,CAAuBR,SAAS,EAAhC,CAGF,MAAOO,EACR,CAED,MAAWG,MAAJ,CAAUL,CAAV,EACJM,IADI,CACC,IADD,EAEJC,GAFI,CAEA,iBAAMZ,UAAS,EAAf,CAFA,CAGR,CAbM,EAaiB,QAApB,QAAOK,EAAP,CAA+BA,CAA/B,CAA0CA,CAAQ,CAACQ,IAAT,CAAc,GAAd,CAbvC,4BAa8DP,CAb9D,GAPc,CAAhB"}